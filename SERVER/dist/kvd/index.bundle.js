/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var e,t,n={155:e=>{var t,n,r=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function l(e){if(t===setTimeout)return setTimeout(e,0);if((t===a||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:a}catch(e){t=a}try{n="function"==typeof clearTimeout?clearTimeout:u}catch(e){n=u}}();var o,i=[],s=!1,c=-1;function f(){s&&o&&(s=!1,o.length?i=o.concat(i):c=-1,i.length&&d())}function d(){if(!s){var e=l(f);s=!0;for(var t=i.length;t;){for(o=i,i=[];++c<t;)o&&o[c].run();c=-1,t=i.length}o=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===u||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function h(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];i.push(new p(e,t)),1!==i.length||s||l(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function u(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,o={};function i(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(o[e]=t,e=0;e<t.length;e++)l.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,u,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=u,this.removeEmptyString=l}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),C=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),D=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),A=Symbol.for("react.provider"),x=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),F=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),L=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var B=Symbol.iterator;function O(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}var R,j=Object.assign;function M(e){if(void 0===R)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);R=t&&t[1]||""}return"\n"+R+e}var z=!1;function I(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),u=r.stack.split("\n"),l=a.length-1,o=u.length-1;1<=l&&0<=o&&a[l]!==u[o];)o--;for(;1<=l&&0<=o;l--,o--)if(a[l]!==u[o]){if(1!==l||1!==o)do{if(l--,0>--o||a[l]!==u[o]){var i="\n"+a[l].replace(" at new "," at ");return e.displayName&&i.includes("<anonymous>")&&(i=i.replace("<anonymous>",e.displayName)),i}}while(1<=l&&0<=o);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function U(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case C:return"Portal";case S:return"Profiler";case D:return"StrictMode";case F:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case x:return(e.displayName||"Context")+".Consumer";case A:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case L:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===D?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,u=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,u.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(u(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(u(92));if(te(n)){if(1<n.length)throw Error(u(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ue(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ie(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ge=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(u(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(u(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(u(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(u(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ee=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,ke=null,De=null;function Se(e){if(e=va(e)){if("function"!=typeof Ce)throw Error(u(280));var t=e.stateNode;t&&(t=ya(t),Ce(e.stateNode,e.type,t))}}function Ae(e){ke?De?De.push(e):De=[e]:ke=e}function xe(){if(ke){var e=ke,t=De;if(De=ke=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function _e(e,t){return e(t)}function Fe(){}var Ne=!1;function Le(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return _e(e,t,n)}finally{Ne=!1,(null!==ke||null!==De)&&(Fe(),xe())}}function Pe(e,t){var n=e.stateNode;if(null===n)return null;var r=ya(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(u(231,t,typeof n));return n}var Te=!1;if(c)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Te=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ce){Te=!1}function Oe(e,t,n,r,a,u,l,o,i){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Re=!1,je=null,Me=!1,ze=null,Ie={onError:function(e){Re=!0,je=e}};function Ue(e,t,n,r,a,u,l,o,i){Re=!1,je=null,Oe.apply(Ie,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Ve(e)!==e)throw Error(u(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(u(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return We(a),e;if(l===r)return We(a),t;l=l.sibling}throw Error(u(188))}if(n.return!==r.return)n=a,r=l;else{for(var o=!1,i=a.child;i;){if(i===n){o=!0,n=a,r=l;break}if(i===r){o=!0,r=a,n=l;break}i=i.sibling}if(!o){for(i=l.child;i;){if(i===n){o=!0,n=l,r=a;break}if(i===r){o=!0,r=l,n=a;break}i=i.sibling}if(!o)throw Error(u(189))}}if(n.alternate!==r)throw Error(u(190))}if(3!==n.tag)throw Error(u(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ge=a.unstable_cancelCallback,Ke=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Xe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ut=null,lt=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ot(e)/it|0)|0},ot=Math.log,it=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,u=e.pingedLanes,l=268435455&n;if(0!==l){var o=l&~a;0!==o?r=ft(o):0!=(u&=l)&&(r=ft(u))}else 0!=(l=n&~a)?r=ft(l):0!==u&&(r=ft(u));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(u=t&-t)||16===a&&0!=(4194240&u)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-lt(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function Et(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,Ct,kt,Dt,St,At=!1,xt=[],_t=null,Ft=null,Nt=null,Lt=new Map,Pt=new Map,Tt=[],Bt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ot(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Ft=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pt.delete(t.pointerId)}}function Rt(e,t,n,r,a,u){return null===e||e.nativeEvent!==u?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:u,targetContainers:[a]},null!==t&&null!==(t=va(t))&&Ct(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function jt(e){var t=ma(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void St(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=va(n))&&Ct(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ee=r,n.target.dispatchEvent(r),Ee=null,t.shift()}return!0}function zt(e,t,n){Mt(e)&&n.delete(t)}function It(){At=!1,null!==_t&&Mt(_t)&&(_t=null),null!==Ft&&Mt(Ft)&&(Ft=null),null!==Nt&&Mt(Nt)&&(Nt=null),Lt.forEach(zt),Pt.forEach(zt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,At||(At=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,It)))}function Vt(e){function t(t){return Ut(t,e)}if(0<xt.length){Ut(xt[0],e);for(var n=1;n<xt.length;n++){var r=xt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&Ut(_t,e),null!==Ft&&Ut(Ft,e),null!==Nt&&Ut(Nt,e),Lt.forEach(t),Pt.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)jt(n),null===n.blockedOn&&Tt.shift()}var $t=E.ReactCurrentBatchConfig,Wt=!0;function Ht(e,t,n,r){var a=bt,u=$t.transition;$t.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,$t.transition=u}}function Qt(e,t,n,r){var a=bt,u=$t.transition;$t.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,$t.transition=u}}function qt(e,t,n,r){if(Wt){var a=Kt(e,t,n,r);if(null===a)Ur(e,t,r,Gt,n),Ot(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return _t=Rt(_t,e,t,n,r,a),!0;case"dragenter":return Ft=Rt(Ft,e,t,n,r,a),!0;case"mouseover":return Nt=Rt(Nt,e,t,n,r,a),!0;case"pointerover":var u=a.pointerId;return Lt.set(u,Rt(Lt.get(u)||null,e,t,n,r,a)),!0;case"gotpointercapture":return u=a.pointerId,Pt.set(u,Rt(Pt.get(u)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Ot(e,r),4&t&&-1<Bt.indexOf(e)){for(;null!==a;){var u=va(a);if(null!==u&&wt(u),null===(u=Kt(e,t,n,r))&&Ur(e,t,r,Gt,n),u===a)break;a=u}null!==a&&r.stopPropagation()}else Ur(e,t,r,null,n)}}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=ma(e=we(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,u=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[u-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,u){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=u,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var un,ln,on,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=j({},sn,{view:0,detail:0}),dn=an(fn),pn=j({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Dn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==on&&(on&&"mousemove"===e.type?(un=e.screenX-on.screenX,ln=e.screenY-on.screenY):ln=un=0,on=e),un)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(j({},pn,{dataTransfer:0})),vn=an(j({},fn,{relatedTarget:0})),gn=an(j({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=an(j({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),bn=an(j({},sn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Dn(){return kn}var Sn=an(j({},fn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Dn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),An=an(j({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),xn=an(j({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Dn})),_n=an(j({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Fn=an(j({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Nn=[9,13,27,32],Ln=c&&"CompositionEvent"in window,Pn=null;c&&"documentMode"in document&&(Pn=document.documentMode);var Tn=c&&"TextEvent"in window&&!Pn,Bn=c&&(!Ln||Pn&&8<Pn&&11>=Pn),On=String.fromCharCode(32),Rn=!1;function jn(e,t){switch(e){case"keyup":return-1!==Nn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Mn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,In={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!In[e.type]:"textarea"===t}function Vn(e,t,n,r){Ae(r),0<(t=$r(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Wn=null;function Hn(e){Or(e,0)}function Qn(e){if(q(ga(e)))return e}function qn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Kn;if(c){var Yn="oninput"in document;if(!Yn){var Xn=document.createElement("div");Xn.setAttribute("oninput","return;"),Yn="function"==typeof Xn.oninput}Kn=Yn}else Kn=!1;Gn=Kn&&(!document.documentMode||9<document.documentMode)}function Jn(){$n&&($n.detachEvent("onpropertychange",Zn),Wn=$n=null)}function Zn(e){if("value"===e.propertyName&&Qn(Wn)){var t=[];Vn(t,Wn,e,we(e)),Le(Hn,t)}}function er(e,t,n){"focusin"===e?(Jn(),Wn=n,($n=t).attachEvent("onpropertychange",Zn)):"focusout"===e&&Jn()}function tr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Wn)}function nr(e,t){if("click"===e)return Qn(t)}function rr(e,t){if("input"===e||"change"===e)return Qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!ar(e[a],t[a]))return!1}return!0}function lr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function or(e,t){var n,r=lr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=lr(r)}}function ir(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?ir(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function sr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function fr(e){var t=sr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&ir(n.ownerDocument.documentElement,n)){if(null!==r&&cr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,u=Math.min(r.start,a);r=void 0===r.end?u:Math.min(r.end,a),!e.extend&&u>r&&(a=r,r=u,u=a),a=or(n,u);var l=or(n,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),u>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var dr=c&&"documentMode"in document&&11>=document.documentMode,pr=null,hr=null,mr=null,vr=!1;function gr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==pr||pr!==G(r)||(r="selectionStart"in(r=pr)&&cr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},mr&&ur(mr,r)||(mr=r,0<(r=$r(hr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=pr)))}function yr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var br={animationend:yr("Animation","AnimationEnd"),animationiteration:yr("Animation","AnimationIteration"),animationstart:yr("Animation","AnimationStart"),transitionend:yr("Transition","TransitionEnd")},Er={},wr={};function Cr(e){if(Er[e])return Er[e];if(!br[e])return e;var t,n=br[e];for(t in n)if(n.hasOwnProperty(t)&&t in wr)return Er[e]=n[t];return e}c&&(wr=document.createElement("div").style,"AnimationEvent"in window||(delete br.animationend.animation,delete br.animationiteration.animation,delete br.animationstart.animation),"TransitionEvent"in window||delete br.transitionend.transition);var kr=Cr("animationend"),Dr=Cr("animationiteration"),Sr=Cr("animationstart"),Ar=Cr("transitionend"),xr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Fr(e,t){xr.set(e,t),i(t,[e])}for(var Nr=0;Nr<_r.length;Nr++){var Lr=_r[Nr];Fr(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}Fr(kr,"onAnimationEnd"),Fr(Dr,"onAnimationIteration"),Fr(Sr,"onAnimationStart"),Fr("dblclick","onDoubleClick"),Fr("focusin","onFocus"),Fr("focusout","onBlur"),Fr(Ar,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),i("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),i("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),i("onBeforeInput",["compositionend","keypress","textInput","paste"]),i("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),i("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),i("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Pr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Tr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Pr));function Br(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,o,i,s){if(Ue.apply(this,arguments),Re){if(!Re)throw Error(u(198));var c=je;Re=!1,je=null,Me||(Me=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function Or(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var u=void 0;if(t)for(var l=r.length-1;0<=l;l--){var o=r[l],i=o.instance,s=o.currentTarget;if(o=o.listener,i!==u&&a.isPropagationStopped())break e;Br(a,o,s),u=i}else for(l=0;l<r.length;l++){if(i=(o=r[l]).instance,s=o.currentTarget,o=o.listener,i!==u&&a.isPropagationStopped())break e;Br(a,o,s),u=i}}}if(Me)throw e=ze,Me=!1,ze=null,e}function Rr(e,t){var n=t[da];void 0===n&&(n=t[da]=new Set);var r=e+"__bubble";n.has(r)||(Ir(t,e,2,!1),n.add(r))}function jr(e,t,n){var r=0;t&&(r|=4),Ir(n,e,r,t)}var Mr="_reactListening"+Math.random().toString(36).slice(2);function zr(e){if(!e[Mr]){e[Mr]=!0,l.forEach((function(t){"selectionchange"!==t&&(Tr.has(t)||jr(t,!1,e),jr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Mr]||(t[Mr]=!0,jr("selectionchange",!1,t))}}function Ir(e,t,n,r){switch(Yt(t)){case 1:var a=Ht;break;case 4:a=Qt;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!Te||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Ur(e,t,n,r,a){var u=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var i=l.tag;if((3===i||4===i)&&((i=l.stateNode.containerInfo)===a||8===i.nodeType&&i.parentNode===a))return;l=l.return}for(;null!==o;){if(null===(l=ma(o)))return;if(5===(i=l.tag)||6===i){r=u=l;continue e}o=o.parentNode}}r=r.return}Le((function(){var r=u,a=we(n),l=[];e:{var o=xr.get(e);if(void 0!==o){var i=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":i=Sn;break;case"focusin":s="focus",i=vn;break;case"focusout":s="blur",i=vn;break;case"beforeblur":case"afterblur":i=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":i=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":i=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":i=xn;break;case kr:case Dr:case Sr:i=gn;break;case Ar:i=_n;break;case"scroll":i=dn;break;case"wheel":i=Fn;break;case"copy":case"cut":case"paste":i=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":i=An}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==o?o+"Capture":null:o;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Pe(h,d))&&c.push(Vr(h,m,p))),f)break;h=h.return}0<c.length&&(o=new i(o,s,null,n,a),l.push({event:o,listeners:c}))}}if(0==(7&t)){if(i="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===Ee||!(s=n.relatedTarget||n.fromElement)||!ma(s)&&!s[fa])&&(i||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=r,null!==(s=(s=n.relatedTarget||n.toElement)?ma(s):null)&&(s!==(f=Ve(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(i=null,s=r),i!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=An,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==i?o:ga(i),p=null==s?o:ga(s),(o=new c(m,h+"leave",i,n,a)).target=f,o.relatedTarget=p,m=null,ma(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,m=c),f=m,i&&s)e:{for(d=s,h=0,p=c=i;p;p=Wr(p))h++;for(p=0,m=d;m;m=Wr(m))p++;for(;0<h-p;)c=Wr(c),h--;for(;0<p-h;)d=Wr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Wr(c),d=Wr(d)}c=null}else c=null;null!==i&&Hr(l,o,i,c,!1),null!==s&&null!==f&&Hr(l,f,s,c,!0)}if("select"===(i=(o=r?ga(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===i&&"file"===o.type)var v=qn;else if(Un(o))if(Gn)v=rr;else{v=tr;var g=er}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(v=nr);switch(v&&(v=v(e,r))?Vn(l,v,n,a):(g&&g(e,o,r),"focusout"===e&&(g=o._wrapperState)&&g.controlled&&"number"===o.type&&ee(o,"number",o.value)),g=r?ga(r):window,e){case"focusin":(Un(g)||"true"===g.contentEditable)&&(pr=g,hr=r,mr=null);break;case"focusout":mr=hr=pr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,gr(l,n,a);break;case"selectionchange":if(dr)break;case"keydown":case"keyup":gr(l,n,a)}var y;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zn?jn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Bn&&"ko"!==n.locale&&(zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&zn&&(y=en()):(Jt="value"in(Xt=a)?Xt.value:Xt.textContent,zn=!0)),0<(g=$r(r,b)).length&&(b=new bn(b,e,null,n,a),l.push({event:b,listeners:g}),(y||null!==(y=Mn(n)))&&(b.data=y))),(y=Tn?function(e,t){switch(e){case"compositionend":return Mn(t);case"keypress":return 32!==t.which?null:(Rn=!0,On);case"textInput":return(e=t.data)===On&&Rn?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!Ln&&jn(e,t)?(e=en(),Zt=Jt=Xt=null,zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=$r(r,"onBeforeInput")).length&&(a=new bn("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=y)}Or(l,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function $r(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,u=a.stateNode;5===a.tag&&null!==u&&(a=u,null!=(u=Pe(e,n))&&r.unshift(Vr(e,u,a)),null!=(u=Pe(e,t))&&r.push(Vr(e,u,a))),e=e.return}return r}function Wr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Hr(e,t,n,r,a){for(var u=t._reactName,l=[];null!==n&&n!==r;){var o=n,i=o.alternate,s=o.stateNode;if(null!==i&&i===r)break;5===o.tag&&null!==s&&(o=s,a?null!=(i=Pe(n,u))&&l.unshift(Vr(n,i,o)):a||null!=(i=Pe(n,u))&&l.push(Vr(n,i,o))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Qr=/\r\n?/g,qr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(qr,"")}function Kr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(u(425))}function Yr(){}var Xr=null,Jr=null;function Zr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ea="function"==typeof setTimeout?setTimeout:void 0,ta="function"==typeof clearTimeout?clearTimeout:void 0,na="function"==typeof Promise?Promise:void 0,ra="function"==typeof queueMicrotask?queueMicrotask:void 0!==na?function(e){return na.resolve(null).then(e).catch(aa)}:ea;function aa(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Vt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Vt(t)}function la(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function oa(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var ia=Math.random().toString(36).slice(2),sa="__reactFiber$"+ia,ca="__reactProps$"+ia,fa="__reactContainer$"+ia,da="__reactEvents$"+ia,pa="__reactListeners$"+ia,ha="__reactHandles$"+ia;function ma(e){var t=e[sa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fa]||n[sa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=oa(e);null!==e;){if(n=e[sa])return n;e=oa(e)}return t}n=(e=n).parentNode}return null}function va(e){return!(e=e[sa]||e[fa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ga(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(u(33))}function ya(e){return e[ca]||null}var ba=[],Ea=-1;function wa(e){return{current:e}}function Ca(e){0>Ea||(e.current=ba[Ea],ba[Ea]=null,Ea--)}function ka(e,t){Ea++,ba[Ea]=e.current,e.current=t}var Da={},Sa=wa(Da),Aa=wa(!1),xa=Da;function _a(e,t){var n=e.type.contextTypes;if(!n)return Da;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,u={};for(a in n)u[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=u),u}function Fa(e){return null!=e.childContextTypes}function Na(){Ca(Aa),Ca(Sa)}function La(e,t,n){if(Sa.current!==Da)throw Error(u(168));ka(Sa,t),ka(Aa,n)}function Pa(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(u(108,$(e)||"Unknown",a));return j({},n,r)}function Ta(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Da,xa=Sa.current,ka(Sa,e),ka(Aa,Aa.current),!0}function Ba(e,t,n){var r=e.stateNode;if(!r)throw Error(u(169));n?(e=Pa(e,t,xa),r.__reactInternalMemoizedMergedChildContext=e,Ca(Aa),Ca(Sa),ka(Sa,e)):Ca(Aa),ka(Aa,n)}var Oa=null,Ra=!1,ja=!1;function Ma(e){null===Oa?Oa=[e]:Oa.push(e)}function za(){if(!ja&&null!==Oa){ja=!0;var e=0,t=bt;try{var n=Oa;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Oa=null,Ra=!1}catch(t){throw null!==Oa&&(Oa=Oa.slice(e+1)),qe(Ze,za),t}finally{bt=t,ja=!1}}return null}var Ia=[],Ua=0,Va=null,$a=0,Wa=[],Ha=0,Qa=null,qa=1,Ga="";function Ka(e,t){Ia[Ua++]=$a,Ia[Ua++]=Va,Va=e,$a=t}function Ya(e,t,n){Wa[Ha++]=qa,Wa[Ha++]=Ga,Wa[Ha++]=Qa,Qa=e;var r=qa;e=Ga;var a=32-lt(r)-1;r&=~(1<<a),n+=1;var u=32-lt(t)+a;if(30<u){var l=a-a%5;u=(r&(1<<l)-1).toString(32),r>>=l,a-=l,qa=1<<32-lt(t)+a|n<<a|r,Ga=u+e}else qa=1<<u|n<<a|r,Ga=e}function Xa(e){null!==e.return&&(Ka(e,1),Ya(e,1,0))}function Ja(e){for(;e===Va;)Va=Ia[--Ua],Ia[Ua]=null,$a=Ia[--Ua],Ia[Ua]=null;for(;e===Qa;)Qa=Wa[--Ha],Wa[Ha]=null,Ga=Wa[--Ha],Wa[Ha]=null,qa=Wa[--Ha],Wa[Ha]=null}var Za=null,eu=null,tu=!1,nu=null;function ru(e,t){var n=Fs(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function au(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,Za=e,eu=la(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,Za=e,eu=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qa?{id:qa,overflow:Ga}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Fs(18,null,null,0)).stateNode=t,n.return=e,e.child=n,Za=e,eu=null,!0);default:return!1}}function uu(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function lu(e){if(tu){var t=eu;if(t){var n=t;if(!au(e,t)){if(uu(e))throw Error(u(418));t=la(n.nextSibling);var r=Za;t&&au(e,t)?ru(r,n):(e.flags=-4097&e.flags|2,tu=!1,Za=e)}}else{if(uu(e))throw Error(u(418));e.flags=-4097&e.flags|2,tu=!1,Za=e}}}function ou(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Za=e}function iu(e){if(e!==Za)return!1;if(!tu)return ou(e),tu=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!Zr(e.type,e.memoizedProps)),t&&(t=eu)){if(uu(e))throw su(),Error(u(418));for(;t;)ru(e,t),t=la(t.nextSibling)}if(ou(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(u(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){eu=la(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}eu=null}}else eu=Za?la(e.stateNode.nextSibling):null;return!0}function su(){for(var e=eu;e;)e=la(e.nextSibling)}function cu(){eu=Za=null,tu=!1}function fu(e){null===nu?nu=[e]:nu.push(e)}var du=E.ReactCurrentBatchConfig;function pu(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var hu=wa(null),mu=null,vu=null,gu=null;function yu(){gu=vu=mu=null}function bu(e){var t=hu.current;Ca(hu),e._currentValue=t}function Eu(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wu(e,t){mu=e,gu=vu=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(go=!0),e.firstContext=null)}function Cu(e){var t=e._currentValue;if(gu!==e)if(e={context:e,memoizedValue:t,next:null},null===vu){if(null===mu)throw Error(u(308));vu=e,mu.dependencies={lanes:0,firstContext:e}}else vu=vu.next=e;return t}var ku=null;function Du(e){null===ku?ku=[e]:ku.push(e)}function Su(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Du(t)):(n.next=a.next,a.next=n),t.interleaved=n,Au(e,r)}function Au(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var xu=!1;function _u(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Fu(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Nu(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Lu(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ai)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Au(e,n)}return null===(a=r.interleaved)?(t.next=t,Du(r)):(t.next=a.next,a.next=t),r.interleaved=t,Au(e,n)}function Pu(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Tu(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,u=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===u?a=u=l:u=u.next=l,n=n.next}while(null!==n);null===u?a=u=t:u=u.next=t}else a=u=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:u,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Bu(e,t,n,r){var a=e.updateQueue;xu=!1;var u=a.firstBaseUpdate,l=a.lastBaseUpdate,o=a.shared.pending;if(null!==o){a.shared.pending=null;var i=o,s=i.next;i.next=null,null===l?u=s:l.next=s,l=i;var c=e.alternate;null!==c&&(o=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===o?c.firstBaseUpdate=s:o.next=s,c.lastBaseUpdate=i)}if(null!==u){var f=a.baseState;for(l=0,c=s=i=null,o=u;;){var d=o.lane,p=o.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,m=o;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=j({},f,d);break e;case 2:xu=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[o]:d.push(o))}else p={eventTime:p,lane:d,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===c?(s=c=p,i=f):c=c.next=p,l|=d;if(null===(o=o.next)){if(null===(o=a.shared.pending))break;o=(d=o).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(i=f),a.baseState=i,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{l|=a.lane,a=a.next}while(a!==t)}else null===u&&(a.shared.lanes=0);Bi|=l,e.lanes=l,e.memoizedState=f}}function Ou(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(u(191,a));a.call(r)}}}var Ru=(new r.Component).refs;function ju(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Mu={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ji(),a=Zi(e),u=Nu(r,a);u.payload=t,null!=n&&(u.callback=n),null!==(t=Lu(e,u,a))&&(es(t,e,a,r),Pu(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ji(),a=Zi(e),u=Nu(r,a);u.tag=1,u.payload=t,null!=n&&(u.callback=n),null!==(t=Lu(e,u,a))&&(es(t,e,a,r),Pu(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ji(),r=Zi(e),a=Nu(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Lu(e,a,r))&&(es(t,e,r,n),Pu(t,e,r))}};function zu(e,t,n,r,a,u,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,u,l):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,u))}function Iu(e,t,n){var r=!1,a=Da,u=t.contextType;return"object"==typeof u&&null!==u?u=Cu(u):(a=Fa(t)?xa:Sa.current,u=(r=null!=(r=t.contextTypes))?_a(e,a):Da),t=new t(n,u),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Mu,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=u),t}function Uu(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Mu.enqueueReplaceState(t,t.state,null)}function Vu(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Ru,_u(e);var u=t.contextType;"object"==typeof u&&null!==u?a.context=Cu(u):(u=Fa(t)?xa:Sa.current,a.context=_a(e,u)),a.state=e.memoizedState,"function"==typeof(u=t.getDerivedStateFromProps)&&(ju(e,t,u,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Mu.enqueueReplaceState(a,a.state,null),Bu(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function $u(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(u(309));var r=n.stateNode}if(!r)throw Error(u(147,e));var a=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=a.refs;t===Ru&&(t=a.refs={}),null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(u(284));if(!n._owner)throw Error(u(290,e))}return e}function Wu(e,t){throw e=Object.prototype.toString.call(t),Error(u(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Hu(e){return(0,e._init)(e._payload)}function Qu(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ls(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function i(e,t,n,r){return null===t||6!==t.tag?((t=Os(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var u=n.type;return u===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===P&&Hu(u)===t.type)?((r=a(t,n.props)).ref=$u(e,t,n),r.return=e,r):((r=Ps(n.type,n.key,n.props,null,e.mode,r)).ref=$u(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Rs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,u){return null===t||7!==t.tag?((t=Ts(n,e.mode,r,u)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Os(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ps(t.type,t.key,t.props,null,e.mode,n)).ref=$u(e,null,t),n.return=e,n;case C:return(t=Rs(t,e.mode,n)).return=e,t;case P:return d(e,(0,t._init)(t._payload),n)}if(te(t)||O(t))return(t=Ts(t,e.mode,n,null)).return=e,t;Wu(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:i(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===a?s(e,t,n,r):null;case C:return n.key===a?c(e,t,n,r):null;case P:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||O(n))return null!==a?null:f(e,t,n,r,null);Wu(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return i(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case C:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case P:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||O(r))return f(t,e=e.get(n)||null,r,a,null);Wu(t,r)}return null}function m(a,u,o,i){for(var s=null,c=null,f=u,m=u=0,v=null;null!==f&&m<o.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(a,f,o[m],i);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(a,f),u=l(g,u,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===o.length)return n(a,f),tu&&Ka(a,m),s;if(null===f){for(;m<o.length;m++)null!==(f=d(a,o[m],i))&&(u=l(f,u,m),null===c?s=f:c.sibling=f,c=f);return tu&&Ka(a,m),s}for(f=r(a,f);m<o.length;m++)null!==(v=h(f,a,m,o[m],i))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),u=l(v,u,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(a,e)})),tu&&Ka(a,m),s}function v(a,o,i,s){var c=O(i);if("function"!=typeof c)throw Error(u(150));if(null==(i=c.call(i)))throw Error(u(151));for(var f=c=null,m=o,v=o=0,g=null,y=i.next();null!==m&&!y.done;v++,y=i.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(a,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(a,m),o=l(b,o,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(a,m),tu&&Ka(a,v),c;if(null===m){for(;!y.done;v++,y=i.next())null!==(y=d(a,y.value,s))&&(o=l(y,o,v),null===f?c=y:f.sibling=y,f=y);return tu&&Ka(a,v),c}for(m=r(a,m);!y.done;v++,y=i.next())null!==(y=h(m,a,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),o=l(y,o,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(a,e)})),tu&&Ka(a,v),c}return function e(r,u,l,i){if("object"==typeof l&&null!==l&&l.type===k&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case w:e:{for(var s=l.key,c=u;null!==c;){if(c.key===s){if((s=l.type)===k){if(7===c.tag){n(r,c.sibling),(u=a(c,l.props.children)).return=r,r=u;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===P&&Hu(s)===c.type){n(r,c.sibling),(u=a(c,l.props)).ref=$u(r,c,l),u.return=r,r=u;break e}n(r,c);break}t(r,c),c=c.sibling}l.type===k?((u=Ts(l.props.children,r.mode,i,l.key)).return=r,r=u):((i=Ps(l.type,l.key,l.props,null,r.mode,i)).ref=$u(r,u,l),i.return=r,r=i)}return o(r);case C:e:{for(c=l.key;null!==u;){if(u.key===c){if(4===u.tag&&u.stateNode.containerInfo===l.containerInfo&&u.stateNode.implementation===l.implementation){n(r,u.sibling),(u=a(u,l.children||[])).return=r,r=u;break e}n(r,u);break}t(r,u),u=u.sibling}(u=Rs(l,r.mode,i)).return=r,r=u}return o(r);case P:return e(r,u,(c=l._init)(l._payload),i)}if(te(l))return m(r,u,l,i);if(O(l))return v(r,u,l,i);Wu(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==u&&6===u.tag?(n(r,u.sibling),(u=a(u,l)).return=r,r=u):(n(r,u),(u=Os(l,r.mode,i)).return=r,r=u),o(r)):n(r,u)}}var qu=Qu(!0),Gu=Qu(!1),Ku={},Yu=wa(Ku),Xu=wa(Ku),Ju=wa(Ku);function Zu(e){if(e===Ku)throw Error(u(174));return e}function el(e,t){switch(ka(Ju,t),ka(Xu,e),ka(Yu,Ku),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ie(null,"");break;default:t=ie(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ca(Yu),ka(Yu,t)}function tl(){Ca(Yu),Ca(Xu),Ca(Ju)}function nl(e){Zu(Ju.current);var t=Zu(Yu.current),n=ie(t,e.type);t!==n&&(ka(Xu,e),ka(Yu,n))}function rl(e){Xu.current===e&&(Ca(Yu),Ca(Xu))}var al=wa(0);function ul(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ll=[];function ol(){for(var e=0;e<ll.length;e++)ll[e]._workInProgressVersionPrimary=null;ll.length=0}var il=E.ReactCurrentDispatcher,sl=E.ReactCurrentBatchConfig,cl=0,fl=null,dl=null,pl=null,hl=!1,ml=!1,vl=0,gl=0;function yl(){throw Error(u(321))}function bl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function El(e,t,n,r,a,l){if(cl=l,fl=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,il.current=null===e||null===e.memoizedState?ro:ao,e=n(r,a),ml){l=0;do{if(ml=!1,vl=0,25<=l)throw Error(u(301));l+=1,pl=dl=null,t.updateQueue=null,il.current=uo,e=n(r,a)}while(ml)}if(il.current=no,t=null!==dl&&null!==dl.next,cl=0,pl=dl=fl=null,hl=!1,t)throw Error(u(300));return e}function wl(){var e=0!==vl;return vl=0,e}function Cl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===pl?fl.memoizedState=pl=e:pl=pl.next=e,pl}function kl(){if(null===dl){var e=fl.alternate;e=null!==e?e.memoizedState:null}else e=dl.next;var t=null===pl?fl.memoizedState:pl.next;if(null!==t)pl=t,dl=e;else{if(null===e)throw Error(u(310));e={memoizedState:(dl=e).memoizedState,baseState:dl.baseState,baseQueue:dl.baseQueue,queue:dl.queue,next:null},null===pl?fl.memoizedState=pl=e:pl=pl.next=e}return pl}function Dl(e,t){return"function"==typeof t?t(e):t}function Sl(e){var t=kl(),n=t.queue;if(null===n)throw Error(u(311));n.lastRenderedReducer=e;var r=dl,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var o=a.next;a.next=l.next,l.next=o}r.baseQueue=a=l,n.pending=null}if(null!==a){l=a.next,r=r.baseState;var i=o=null,s=null,c=l;do{var f=c.lane;if((cl&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(i=s=d,o=r):s=s.next=d,fl.lanes|=f,Bi|=f}c=c.next}while(null!==c&&c!==l);null===s?o=r:s.next=i,ar(r,t.memoizedState)||(go=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{l=a.lane,fl.lanes|=l,Bi|=l,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Al(e){var t=kl(),n=t.queue;if(null===n)throw Error(u(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{l=e(l,o.action),o=o.next}while(o!==a);ar(l,t.memoizedState)||(go=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function xl(){}function _l(e,t){var n=fl,r=kl(),a=t(),l=!ar(r.memoizedState,a);if(l&&(r.memoizedState=a,go=!0),r=r.queue,Il(Ll.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==pl&&1&pl.memoizedState.tag){if(n.flags|=2048,Ol(9,Nl.bind(null,n,r,a,t),void 0,null),null===xi)throw Error(u(349));0!=(30&cl)||Fl(n,t,a)}return a}function Fl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=fl.updateQueue)?(t={lastEffect:null,stores:null},fl.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Nl(e,t,n,r){t.value=n,t.getSnapshot=r,Pl(t)&&Tl(e)}function Ll(e,t,n){return n((function(){Pl(t)&&Tl(e)}))}function Pl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ar(e,n)}catch(e){return!0}}function Tl(e){var t=Au(e,1);null!==t&&es(t,e,1,-1)}function Bl(e){var t=Cl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Dl,lastRenderedState:e},t.queue=e,e=e.dispatch=Jl.bind(null,fl,e),[t.memoizedState,e]}function Ol(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=fl.updateQueue)?(t={lastEffect:null,stores:null},fl.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Rl(){return kl().memoizedState}function jl(e,t,n,r){var a=Cl();fl.flags|=e,a.memoizedState=Ol(1|t,n,void 0,void 0===r?null:r)}function Ml(e,t,n,r){var a=kl();r=void 0===r?null:r;var u=void 0;if(null!==dl){var l=dl.memoizedState;if(u=l.destroy,null!==r&&bl(r,l.deps))return void(a.memoizedState=Ol(t,n,u,r))}fl.flags|=e,a.memoizedState=Ol(1|t,n,u,r)}function zl(e,t){return jl(8390656,8,e,t)}function Il(e,t){return Ml(2048,8,e,t)}function Ul(e,t){return Ml(4,2,e,t)}function Vl(e,t){return Ml(4,4,e,t)}function $l(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Wl(e,t,n){return n=null!=n?n.concat([e]):null,Ml(4,4,$l.bind(null,t,e),n)}function Hl(){}function Ql(e,t){var n=kl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ql(e,t){var n=kl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Gl(e,t,n){return 0==(21&cl)?(e.baseState&&(e.baseState=!1,go=!0),e.memoizedState=n):(ar(n,t)||(n=mt(),fl.lanes|=n,Bi|=n,e.baseState=!0),t)}function Kl(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=sl.transition;sl.transition={};try{e(!1),t()}finally{bt=n,sl.transition=r}}function Yl(){return kl().memoizedState}function Xl(e,t,n){var r=Zi(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Zl(e)?eo(t,n):null!==(n=Su(e,t,n,r))&&(es(n,e,r,Ji()),to(n,t,r))}function Jl(e,t,n){var r=Zi(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zl(e))eo(t,a);else{var u=e.alternate;if(0===e.lanes&&(null===u||0===u.lanes)&&null!==(u=t.lastRenderedReducer))try{var l=t.lastRenderedState,o=u(l,n);if(a.hasEagerState=!0,a.eagerState=o,ar(o,l)){var i=t.interleaved;return null===i?(a.next=a,Du(t)):(a.next=i.next,i.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Su(e,t,a,r))&&(es(n,e,r,a=Ji()),to(n,t,r))}}function Zl(e){var t=e.alternate;return e===fl||null!==t&&t===fl}function eo(e,t){ml=hl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function to(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var no={readContext:Cu,useCallback:yl,useContext:yl,useEffect:yl,useImperativeHandle:yl,useInsertionEffect:yl,useLayoutEffect:yl,useMemo:yl,useReducer:yl,useRef:yl,useState:yl,useDebugValue:yl,useDeferredValue:yl,useTransition:yl,useMutableSource:yl,useSyncExternalStore:yl,useId:yl,unstable_isNewReconciler:!1},ro={readContext:Cu,useCallback:function(e,t){return Cl().memoizedState=[e,void 0===t?null:t],e},useContext:Cu,useEffect:zl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,jl(4194308,4,$l.bind(null,t,e),n)},useLayoutEffect:function(e,t){return jl(4194308,4,e,t)},useInsertionEffect:function(e,t){return jl(4,2,e,t)},useMemo:function(e,t){var n=Cl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Cl();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Xl.bind(null,fl,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Cl().memoizedState=e},useState:Bl,useDebugValue:Hl,useDeferredValue:function(e){return Cl().memoizedState=e},useTransition:function(){var e=Bl(!1),t=e[0];return e=Kl.bind(null,e[1]),Cl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=fl,a=Cl();if(tu){if(void 0===n)throw Error(u(407));n=n()}else{if(n=t(),null===xi)throw Error(u(349));0!=(30&cl)||Fl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,zl(Ll.bind(null,r,l,e),[e]),r.flags|=2048,Ol(9,Nl.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=Cl(),t=xi.identifierPrefix;if(tu){var n=Ga;t=":"+t+"R"+(n=(qa&~(1<<32-lt(qa)-1)).toString(32)+n),0<(n=vl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=gl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ao={readContext:Cu,useCallback:Ql,useContext:Cu,useEffect:Il,useImperativeHandle:Wl,useInsertionEffect:Ul,useLayoutEffect:Vl,useMemo:ql,useReducer:Sl,useRef:Rl,useState:function(){return Sl(Dl)},useDebugValue:Hl,useDeferredValue:function(e){return Gl(kl(),dl.memoizedState,e)},useTransition:function(){return[Sl(Dl)[0],kl().memoizedState]},useMutableSource:xl,useSyncExternalStore:_l,useId:Yl,unstable_isNewReconciler:!1},uo={readContext:Cu,useCallback:Ql,useContext:Cu,useEffect:Il,useImperativeHandle:Wl,useInsertionEffect:Ul,useLayoutEffect:Vl,useMemo:ql,useReducer:Al,useRef:Rl,useState:function(){return Al(Dl)},useDebugValue:Hl,useDeferredValue:function(e){var t=kl();return null===dl?t.memoizedState=e:Gl(t,dl.memoizedState,e)},useTransition:function(){return[Al(Dl)[0],kl().memoizedState]},useMutableSource:xl,useSyncExternalStore:_l,useId:Yl,unstable_isNewReconciler:!1};function lo(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function oo(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function io(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var so="function"==typeof WeakMap?WeakMap:Map;function co(e,t,n){(n=Nu(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vi||(Vi=!0,$i=r),io(0,t)},n}function fo(e,t,n){(n=Nu(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){io(0,t)}}var u=e.stateNode;return null!==u&&"function"==typeof u.componentDidCatch&&(n.callback=function(){io(0,t),"function"!=typeof r&&(null===Wi?Wi=new Set([this]):Wi.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function po(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new so;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=ks.bind(null,e,t,n),t.then(e,e))}function ho(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function mo(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Nu(-1,1)).tag=2,Lu(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var vo=E.ReactCurrentOwner,go=!1;function yo(e,t,n,r){t.child=null===e?Gu(t,null,n,r):qu(t,e.child,n,r)}function bo(e,t,n,r,a){n=n.render;var u=t.ref;return wu(t,a),r=El(e,t,n,r,u,a),n=wl(),null===e||go?(tu&&n&&Xa(t),t.flags|=1,yo(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vo(e,t,a))}function Eo(e,t,n,r,a){if(null===e){var u=n.type;return"function"!=typeof u||Ns(u)||void 0!==u.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ps(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=u,wo(e,t,u,r,a))}if(u=e.child,0==(e.lanes&a)){var l=u.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(l,r)&&e.ref===t.ref)return Vo(e,t,a)}return t.flags|=1,(e=Ls(u,r)).ref=t.ref,e.return=t,t.child=e}function wo(e,t,n,r,a){if(null!==e){var u=e.memoizedProps;if(ur(u,r)&&e.ref===t.ref){if(go=!1,t.pendingProps=r=u,0==(e.lanes&a))return t.lanes=e.lanes,Vo(e,t,a);0!=(131072&e.flags)&&(go=!0)}}return Do(e,t,n,r,a)}function Co(e,t,n){var r=t.pendingProps,a=r.children,u=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ka(Li,Ni),Ni|=n;else{if(0==(1073741824&n))return e=null!==u?u.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ka(Li,Ni),Ni|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==u?u.baseLanes:n,ka(Li,Ni),Ni|=r}else null!==u?(r=u.baseLanes|n,t.memoizedState=null):r=n,ka(Li,Ni),Ni|=r;return yo(e,t,a,n),t.child}function ko(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Do(e,t,n,r,a){var u=Fa(n)?xa:Sa.current;return u=_a(t,u),wu(t,a),n=El(e,t,n,r,u,a),r=wl(),null===e||go?(tu&&r&&Xa(t),t.flags|=1,yo(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vo(e,t,a))}function So(e,t,n,r,a){if(Fa(n)){var u=!0;Ta(t)}else u=!1;if(wu(t,a),null===t.stateNode)Uo(e,t),Iu(t,n,r),Vu(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,o=t.memoizedProps;l.props=o;var i=l.context,s=n.contextType;s="object"==typeof s&&null!==s?Cu(s):_a(t,s=Fa(n)?xa:Sa.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;f||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(o!==r||i!==s)&&Uu(t,l,r,s),xu=!1;var d=t.memoizedState;l.state=d,Bu(t,r,l,a),i=t.memoizedState,o!==r||d!==i||Aa.current||xu?("function"==typeof c&&(ju(t,n,c,r),i=t.memoizedState),(o=xu||zu(t,n,o,r,d,i,s))?(f||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=i),l.props=r,l.state=i,l.context=s,r=o):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,Fu(e,t),o=t.memoizedProps,s=t.type===t.elementType?o:pu(t.type,o),l.props=s,f=t.pendingProps,d=l.context,i="object"==typeof(i=n.contextType)&&null!==i?Cu(i):_a(t,i=Fa(n)?xa:Sa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(o!==f||d!==i)&&Uu(t,l,r,i),xu=!1,d=t.memoizedState,l.state=d,Bu(t,r,l,a);var h=t.memoizedState;o!==f||d!==h||Aa.current||xu?("function"==typeof p&&(ju(t,n,p,r),h=t.memoizedState),(s=xu||zu(t,n,s,r,d,h,i)||!1)?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,h,i),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,h,i)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),l.props=r,l.state=h,l.context=i,r=s):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Ao(e,t,n,r,u,a)}function Ao(e,t,n,r,a,u){ko(e,t);var l=0!=(128&t.flags);if(!r&&!l)return a&&Ba(t,n,!1),Vo(e,t,u);r=t.stateNode,vo.current=t;var o=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=qu(t,e.child,null,u),t.child=qu(t,null,o,u)):yo(e,t,o,u),t.memoizedState=r.state,a&&Ba(t,n,!0),t.child}function xo(e){var t=e.stateNode;t.pendingContext?La(0,t.pendingContext,t.pendingContext!==t.context):t.context&&La(0,t.context,!1),el(e,t.containerInfo)}function _o(e,t,n,r,a){return cu(),fu(a),t.flags|=256,yo(e,t,n,r),t.child}var Fo,No,Lo,Po,To={dehydrated:null,treeContext:null,retryLane:0};function Bo(e){return{baseLanes:e,cachePool:null,transitions:null}}function Oo(e,t,n){var r,a=t.pendingProps,l=al.current,o=!1,i=0!=(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&0!=(2&l)),r?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),ka(al,1&l),null===e)return lu(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,o?(a=t.mode,o=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==o?(o.childLanes=0,o.pendingProps=i):o=Bs(i,a,0,null),e=Ts(e,a,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Bo(n),t.memoizedState=To,e):Ro(t,i));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,t,n,r,a,l,o){if(n)return 256&t.flags?(t.flags&=-257,jo(e,t,o,r=oo(Error(u(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=r.fallback,a=t.mode,r=Bs({mode:"visible",children:r.children},a,0,null),(l=Ts(l,a,o,null)).flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,0!=(1&t.mode)&&qu(t,e.child,null,o),t.child.memoizedState=Bo(o),t.memoizedState=To,l);if(0==(1&t.mode))return jo(e,t,o,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var i=r.dgst;return r=i,jo(e,t,o,r=oo(l=Error(u(419)),r,void 0))}if(i=0!=(o&e.childLanes),go||i){if(null!==(r=xi)){switch(o&-o){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|o))?0:a)&&a!==l.retryLane&&(l.retryLane=a,Au(e,a),es(r,e,a,-1))}return ps(),jo(e,t,o,r=oo(Error(u(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Ss.bind(null,e),a._reactRetry=t,null):(e=l.treeContext,eu=la(a.nextSibling),Za=t,tu=!0,nu=null,null!==e&&(Wa[Ha++]=qa,Wa[Ha++]=Ga,Wa[Ha++]=Qa,qa=e.id,Ga=e.overflow,Qa=t),(t=Ro(t,r.children)).flags|=4096,t)}(e,t,i,a,r,l,n);if(o){o=a.fallback,i=t.mode,r=(l=e.child).sibling;var s={mode:"hidden",children:a.children};return 0==(1&i)&&t.child!==l?((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null):(a=Ls(l,s)).subtreeFlags=14680064&l.subtreeFlags,null!==r?o=Ls(r,o):(o=Ts(o,i,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,i=null===(i=e.child.memoizedState)?Bo(n):{baseLanes:i.baseLanes|n,cachePool:null,transitions:i.transitions},o.memoizedState=i,o.childLanes=e.childLanes&~n,t.memoizedState=To,a}return e=(o=e.child).sibling,a=Ls(o,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ro(e,t){return(t=Bs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function jo(e,t,n,r){return null!==r&&fu(r),qu(t,e.child,null,n),(e=Ro(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Mo(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Eu(e.return,t,n)}function zo(e,t,n,r,a){var u=e.memoizedState;null===u?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(u.isBackwards=t,u.rendering=null,u.renderingStartTime=0,u.last=r,u.tail=n,u.tailMode=a)}function Io(e,t,n){var r=t.pendingProps,a=r.revealOrder,u=r.tail;if(yo(e,t,r.children,n),0!=(2&(r=al.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Mo(e,n,t);else if(19===e.tag)Mo(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ka(al,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ul(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),zo(t,!1,a,n,u);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ul(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}zo(t,!0,n,null,u);break;case"together":zo(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Uo(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Bi|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(u(153));if(null!==t.child){for(n=Ls(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ls(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $o(e,t){if(!tu)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Wo(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ho(e,t,n){var r=t.pendingProps;switch(Ja(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Wo(t),null;case 1:case 17:return Fa(t.type)&&Na(),Wo(t),null;case 3:return r=t.stateNode,tl(),Ca(Aa),Ca(Sa),ol(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(iu(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==nu&&(as(nu),nu=null))),No(e,t),Wo(t),null;case 5:rl(t);var a=Zu(Ju.current);if(n=t.type,null!==e&&null!=t.stateNode)Lo(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(u(166));return Wo(t),null}if(e=Zu(Yu.current),iu(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[sa]=t,r[ca]=l,e=0!=(1&t.mode),n){case"dialog":Rr("cancel",r),Rr("close",r);break;case"iframe":case"object":case"embed":Rr("load",r);break;case"video":case"audio":for(a=0;a<Pr.length;a++)Rr(Pr[a],r);break;case"source":Rr("error",r);break;case"img":case"image":case"link":Rr("error",r),Rr("load",r);break;case"details":Rr("toggle",r);break;case"input":Y(r,l),Rr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Rr("invalid",r);break;case"textarea":ae(r,l),Rr("invalid",r)}for(var i in ye(n,l),a=null,l)if(l.hasOwnProperty(i)){var s=l[i];"children"===i?"string"==typeof s?r.textContent!==s&&(!0!==l.suppressHydrationWarning&&Kr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==l.suppressHydrationWarning&&Kr(r.textContent,s,e),a=["children",""+s]):o.hasOwnProperty(i)&&null!=s&&"onScroll"===i&&Rr("scroll",r)}switch(n){case"input":Q(r),Z(r,l,!0);break;case"textarea":Q(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Yr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{i=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=i.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=i.createElement(n,{is:r.is}):(e=i.createElement(n),"select"===n&&(i=e,r.multiple?i.multiple=!0:r.size&&(i.size=r.size))):e=i.createElementNS(e,n),e[sa]=t,e[ca]=r,Fo(e,t,!1,!1),t.stateNode=e;e:{switch(i=be(n,r),n){case"dialog":Rr("cancel",e),Rr("close",e),a=r;break;case"iframe":case"object":case"embed":Rr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Pr.length;a++)Rr(Pr[a],e);a=r;break;case"source":Rr("error",e),a=r;break;case"img":case"image":case"link":Rr("error",e),Rr("load",e),a=r;break;case"details":Rr("toggle",e),a=r;break;case"input":Y(e,r),a=K(e,r),Rr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=j({},r,{value:void 0}),Rr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Rr("invalid",e)}for(l in ye(n,a),s=a)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?ve(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===l?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(o.hasOwnProperty(l)?null!=c&&"onScroll"===l&&Rr("scroll",e):null!=c&&b(e,l,c,i))}switch(n){case"input":Q(e),Z(e,r,!1);break;case"textarea":Q(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Yr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Wo(t),null;case 6:if(e&&null!=t.stateNode)Po(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(u(166));if(n=Zu(Ju.current),Zu(Yu.current),iu(t)){if(r=t.stateNode,n=t.memoizedProps,r[sa]=t,(l=r.nodeValue!==n)&&null!==(e=Za))switch(e.tag){case 3:Kr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Kr(r.nodeValue,n,0!=(1&e.mode))}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[sa]=t,t.stateNode=r}return Wo(t),null;case 13:if(Ca(al),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(tu&&null!==eu&&0!=(1&t.mode)&&0==(128&t.flags))su(),cu(),t.flags|=98560,l=!1;else if(l=iu(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(u(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(u(317));l[sa]=t}else cu(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Wo(t),l=!1}else null!==nu&&(as(nu),nu=null),l=!0;if(!l)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&al.current)?0===Pi&&(Pi=3):ps())),null!==t.updateQueue&&(t.flags|=4),Wo(t),null);case 4:return tl(),No(e,t),null===e&&zr(t.stateNode.containerInfo),Wo(t),null;case 10:return bu(t.type._context),Wo(t),null;case 19:if(Ca(al),null===(l=t.memoizedState))return Wo(t),null;if(r=0!=(128&t.flags),null===(i=l.rendering))if(r)$o(l,!1);else{if(0!==Pi||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(i=ul(e))){for(t.flags|=128,$o(l,!1),null!==(r=i.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(i=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=i.childLanes,l.lanes=i.lanes,l.child=i.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=i.memoizedProps,l.memoizedState=i.memoizedState,l.updateQueue=i.updateQueue,l.type=i.type,e=i.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ka(al,1&al.current|2),t.child}e=e.sibling}null!==l.tail&&Xe()>Ii&&(t.flags|=128,r=!0,$o(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ul(i))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),$o(l,!0),null===l.tail&&"hidden"===l.tailMode&&!i.alternate&&!tu)return Wo(t),null}else 2*Xe()-l.renderingStartTime>Ii&&1073741824!==n&&(t.flags|=128,r=!0,$o(l,!1),t.lanes=4194304);l.isBackwards?(i.sibling=t.child,t.child=i):(null!==(n=l.last)?n.sibling=i:t.child=i,l.last=i)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Xe(),t.sibling=null,n=al.current,ka(al,r?1&n|2:1&n),t):(Wo(t),null);case 22:case 23:return ss(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ni)&&(Wo(t),6&t.subtreeFlags&&(t.flags|=8192)):Wo(t),null;case 24:case 25:return null}throw Error(u(156,t.tag))}function Qo(e,t){switch(Ja(t),t.tag){case 1:return Fa(t.type)&&Na(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return tl(),Ca(Aa),Ca(Sa),ol(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return rl(t),null;case 13:if(Ca(al),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(u(340));cu()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ca(al),null;case 4:return tl(),null;case 10:return bu(t.type._context),null;case 22:case 23:return ss(),null;default:return null}}Fo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},No=function(){},Lo=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Zu(Yu.current);var u,l=null;switch(n){case"input":a=K(e,a),r=K(e,r),l=[];break;case"select":a=j({},a,{value:void 0}),r=j({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Yr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var i=a[c];for(u in i)i.hasOwnProperty(u)&&(n||(n={}),n[u]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(o.hasOwnProperty(c)?l||(l=[]):(l=l||[]).push(c,null));for(c in r){var s=r[c];if(i=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==i&&(null!=s||null!=i))if("style"===c)if(i){for(u in i)!i.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&i[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(l||(l=[]),l.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,i=i?i.__html:void 0,null!=s&&i!==s&&(l=l||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(o.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Rr("scroll",e),l||i===s||(l=[])):(l=l||[]).push(c,s))}n&&(l=l||[]).push("style",n);var c=l;(t.updateQueue=c)&&(t.flags|=4)}},Po=function(e,t,n,r){n!==r&&(t.flags|=4)};var qo=!1,Go=!1,Ko="function"==typeof WeakSet?WeakSet:Set,Yo=null;function Xo(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cs(e,t,n)}else n.current=null}function Jo(e,t,n){try{n()}catch(n){Cs(e,t,n)}}var Zo=!1;function ei(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var u=a.destroy;a.destroy=void 0,void 0!==u&&Jo(t,n,u)}a=a.next}while(a!==r)}}function ti(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ni(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ri(e){var t=e.alternate;null!==t&&(e.alternate=null,ri(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[sa],delete t[ca],delete t[da],delete t[pa],delete t[ha]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ai(e){return 5===e.tag||3===e.tag||4===e.tag}function ui(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ai(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function li(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Yr));else if(4!==r&&null!==(e=e.child))for(li(e,t,n),e=e.sibling;null!==e;)li(e,t,n),e=e.sibling}function oi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(oi(e,t,n),e=e.sibling;null!==e;)oi(e,t,n),e=e.sibling}var ii=null,si=!1;function ci(e,t,n){for(n=n.child;null!==n;)fi(e,t,n),n=n.sibling}function fi(e,t,n){if(ut&&"function"==typeof ut.onCommitFiberUnmount)try{ut.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Go||Xo(n,t);case 6:var r=ii,a=si;ii=null,ci(e,t,n),si=a,null!==(ii=r)&&(si?(e=ii,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ii.removeChild(n.stateNode));break;case 18:null!==ii&&(si?(e=ii,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Vt(e)):ua(ii,n.stateNode));break;case 4:r=ii,a=si,ii=n.stateNode.containerInfo,si=!0,ci(e,t,n),ii=r,si=a;break;case 0:case 11:case 14:case 15:if(!Go&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var u=a,l=u.destroy;u=u.tag,void 0!==l&&(0!=(2&u)||0!=(4&u))&&Jo(n,t,l),a=a.next}while(a!==r)}ci(e,t,n);break;case 1:if(!Go&&(Xo(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cs(n,t,e)}ci(e,t,n);break;case 21:ci(e,t,n);break;case 22:1&n.mode?(Go=(r=Go)||null!==n.memoizedState,ci(e,t,n),Go=r):ci(e,t,n);break;default:ci(e,t,n)}}function di(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ko),t.forEach((function(t){var r=As.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function pi(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var l=e,o=t,i=o;e:for(;null!==i;){switch(i.tag){case 5:ii=i.stateNode,si=!1;break e;case 3:case 4:ii=i.stateNode.containerInfo,si=!0;break e}i=i.return}if(null===ii)throw Error(u(160));fi(l,o,a),ii=null,si=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Cs(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)hi(t,e),t=t.sibling}function hi(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(pi(t,e),mi(e),4&r){try{ei(3,e,e.return),ti(3,e)}catch(t){Cs(e,e.return,t)}try{ei(5,e,e.return)}catch(t){Cs(e,e.return,t)}}break;case 1:pi(t,e),mi(e),512&r&&null!==n&&Xo(n,n.return);break;case 5:if(pi(t,e),mi(e),512&r&&null!==n&&Xo(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){Cs(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var l=e.memoizedProps,o=null!==n?n.memoizedProps:l,i=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===i&&"radio"===l.type&&null!=l.name&&X(a,l),be(i,o);var c=be(i,l);for(o=0;o<s.length;o+=2){var f=s[o],d=s[o+1];"style"===f?ve(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(i){case"input":J(a,l);break;case"textarea":ue(a,l);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!l.multiple;var h=l.value;null!=h?ne(a,!!l.multiple,h,!1):p!==!!l.multiple&&(null!=l.defaultValue?ne(a,!!l.multiple,l.defaultValue,!0):ne(a,!!l.multiple,l.multiple?[]:"",!1))}a[ca]=l}catch(t){Cs(e,e.return,t)}}break;case 6:if(pi(t,e),mi(e),4&r){if(null===e.stateNode)throw Error(u(162));a=e.stateNode,l=e.memoizedProps;try{a.nodeValue=l}catch(t){Cs(e,e.return,t)}}break;case 3:if(pi(t,e),mi(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){Cs(e,e.return,t)}break;case 4:default:pi(t,e),mi(e);break;case 13:pi(t,e),mi(e),8192&(a=e.child).flags&&(l=null!==a.memoizedState,a.stateNode.isHidden=l,!l||null!==a.alternate&&null!==a.alternate.memoizedState||(zi=Xe())),4&r&&di(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Go=(c=Go)||f,pi(t,e),Go=c):pi(t,e),mi(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Yo=e,f=e.child;null!==f;){for(d=Yo=f;null!==Yo;){switch(h=(p=Yo).child,p.tag){case 0:case 11:case 14:case 15:ei(4,p,p.return);break;case 1:Xo(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Cs(r,n,e)}}break;case 5:Xo(p,p.return);break;case 22:if(null!==p.memoizedState){bi(d);continue}}null!==h?(h.return=p,Yo=h):bi(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{a=d.stateNode,c?"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none":(i=d.stateNode,o=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,i.style.display=me("display",o))}catch(t){Cs(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Cs(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:pi(t,e),mi(e),4&r&&di(e);case 21:}}function mi(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ai(n)){var r=n;break e}n=n.return}throw Error(u(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),oi(e,ui(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;li(e,ui(e),l);break;default:throw Error(u(161))}}catch(t){Cs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vi(e,t,n){Yo=e,gi(e,t,n)}function gi(e,t,n){for(var r=0!=(1&e.mode);null!==Yo;){var a=Yo,u=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||qo;if(!l){var o=a.alternate,i=null!==o&&null!==o.memoizedState||Go;o=qo;var s=Go;if(qo=l,(Go=i)&&!s)for(Yo=a;null!==Yo;)i=(l=Yo).child,22===l.tag&&null!==l.memoizedState?Ei(a):null!==i?(i.return=l,Yo=i):Ei(a);for(;null!==u;)Yo=u,gi(u,t,n),u=u.sibling;Yo=a,qo=o,Go=s}yi(e)}else 0!=(8772&a.subtreeFlags)&&null!==u?(u.return=a,Yo=u):yi(e)}}function yi(e){for(;null!==Yo;){var t=Yo;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Go||ti(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Go)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:pu(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&Ou(t,l,r);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ou(t,o,n)}break;case 5:var i=t.stateNode;if(null===n&&4&t.flags){n=i;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Vt(d)}}}break;default:throw Error(u(163))}Go||512&t.flags&&ni(t)}catch(e){Cs(t,t.return,e)}}if(t===e){Yo=null;break}if(null!==(n=t.sibling)){n.return=t.return,Yo=n;break}Yo=t.return}}function bi(e){for(;null!==Yo;){var t=Yo;if(t===e){Yo=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Yo=n;break}Yo=t.return}}function Ei(e){for(;null!==Yo;){var t=Yo;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ti(4,t)}catch(e){Cs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Cs(t,a,e)}}var u=t.return;try{ni(t)}catch(e){Cs(t,u,e)}break;case 5:var l=t.return;try{ni(t)}catch(e){Cs(t,l,e)}}}catch(e){Cs(t,t.return,e)}if(t===e){Yo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Yo=o;break}Yo=t.return}}var wi,Ci=Math.ceil,ki=E.ReactCurrentDispatcher,Di=E.ReactCurrentOwner,Si=E.ReactCurrentBatchConfig,Ai=0,xi=null,_i=null,Fi=0,Ni=0,Li=wa(0),Pi=0,Ti=null,Bi=0,Oi=0,Ri=0,ji=null,Mi=null,zi=0,Ii=1/0,Ui=null,Vi=!1,$i=null,Wi=null,Hi=!1,Qi=null,qi=0,Gi=0,Ki=null,Yi=-1,Xi=0;function Ji(){return 0!=(6&Ai)?Xe():-1!==Yi?Yi:Yi=Xe()}function Zi(e){return 0==(1&e.mode)?1:0!=(2&Ai)&&0!==Fi?Fi&-Fi:null!==du.transition?(0===Xi&&(Xi=mt()),Xi):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function es(e,t,n,r){if(50<Gi)throw Gi=0,Ki=null,Error(u(185));gt(e,n,r),0!=(2&Ai)&&e===xi||(e===xi&&(0==(2&Ai)&&(Oi|=n),4===Pi&&us(e,Fi)),ts(e,r),1===n&&0===Ai&&0==(1&t.mode)&&(Ii=Xe()+500,Ra&&za()))}function ts(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-lt(u),o=1<<l,i=a[l];-1===i?0!=(o&n)&&0==(o&r)||(a[l]=pt(o,t)):i<=t&&(e.expiredLanes|=o),u&=~o}}(e,t);var r=dt(e,e===xi?Fi:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Ra=!0,Ma(e)}(ls.bind(null,e)):Ma(ls.bind(null,e)),ra((function(){0==(6&Ai)&&za()})),n=null;else{switch(Et(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=xs(n,ns.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ns(e,t){if(Yi=-1,Xi=0,0!=(6&Ai))throw Error(u(327));var n=e.callbackNode;if(Es()&&e.callbackNode!==n)return null;var r=dt(e,e===xi?Fi:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=hs(e,r);else{t=r;var a=Ai;Ai|=2;var l=ds();for(xi===e&&Fi===t||(Ui=null,Ii=Xe()+500,cs(e,t));;)try{vs();break}catch(t){fs(e,t)}yu(),ki.current=l,Ai=a,null!==_i?t=0:(xi=null,Fi=0,t=Pi)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=rs(e,a)),1===t)throw n=Ti,cs(e,0),us(e,r),ts(e,Xe()),n;if(6===t)us(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],u=a.getSnapshot;a=a.value;try{if(!ar(u(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=hs(e,r))&&0!==(l=ht(e))&&(r=l,t=rs(e,l)),1===t))throw n=Ti,cs(e,0),us(e,r),ts(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(u(345));case 2:case 5:bs(e,Mi,Ui);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=zi+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){Ji(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ea(bs.bind(null,e,Mi,Ui),t);break}bs(e,Mi,Ui);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var o=31-lt(r);l=1<<o,(o=t[o])>a&&(a=o),r&=~l}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ci(r/1960))-r)){e.timeoutHandle=ea(bs.bind(null,e,Mi,Ui),r);break}bs(e,Mi,Ui);break;default:throw Error(u(329))}}}return ts(e,Xe()),e.callbackNode===n?ns.bind(null,e):null}function rs(e,t){var n=ji;return e.current.memoizedState.isDehydrated&&(cs(e,t).flags|=256),2!==(e=hs(e,t))&&(t=Mi,Mi=n,null!==t&&as(t)),e}function as(e){null===Mi?Mi=e:Mi.push.apply(Mi,e)}function us(e,t){for(t&=~Ri,t&=~Oi,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(0!=(6&Ai))throw Error(u(327));Es();var t=dt(e,0);if(0==(1&t))return ts(e,Xe()),null;var n=hs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=rs(e,r))}if(1===n)throw n=Ti,cs(e,0),us(e,t),ts(e,Xe()),n;if(6===n)throw Error(u(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,bs(e,Mi,Ui),ts(e,Xe()),null}function os(e,t){var n=Ai;Ai|=1;try{return e(t)}finally{0===(Ai=n)&&(Ii=Xe()+500,Ra&&za())}}function is(e){null!==Qi&&0===Qi.tag&&0==(6&Ai)&&Es();var t=Ai;Ai|=1;var n=Si.transition,r=bt;try{if(Si.transition=null,bt=1,e)return e()}finally{bt=r,Si.transition=n,0==(6&(Ai=t))&&za()}}function ss(){Ni=Li.current,Ca(Li)}function cs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ta(n)),null!==_i)for(n=_i.return;null!==n;){var r=n;switch(Ja(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Na();break;case 3:tl(),Ca(Aa),Ca(Sa),ol();break;case 5:rl(r);break;case 4:tl();break;case 13:case 19:Ca(al);break;case 10:bu(r.type._context);break;case 22:case 23:ss()}n=n.return}if(xi=e,_i=e=Ls(e.current,null),Fi=Ni=t,Pi=0,Ti=null,Ri=Oi=Bi=0,Mi=ji=null,null!==ku){for(t=0;t<ku.length;t++)if(null!==(r=(n=ku[t]).interleaved)){n.interleaved=null;var a=r.next,u=n.pending;if(null!==u){var l=u.next;u.next=a,r.next=l}n.pending=r}ku=null}return e}function fs(e,t){for(;;){var n=_i;try{if(yu(),il.current=no,hl){for(var r=fl.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}hl=!1}if(cl=0,pl=dl=fl=null,ml=!1,vl=0,Di.current=null,null===n||null===n.return){Pi=1,Ti=t,_i=null;break}e:{var l=e,o=n.return,i=n,s=t;if(t=Fi,i.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=i,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=ho(o);if(null!==h){h.flags&=-257,mo(h,o,i,0,t),1&h.mode&&po(l,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){po(l,c,t),ps();break e}s=Error(u(426))}else if(tu&&1&i.mode){var g=ho(o);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),mo(g,o,i,0,t),fu(lo(s,i));break e}}l=s=lo(s,i),4!==Pi&&(Pi=2),null===ji?ji=[l]:ji.push(l),l=o;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,Tu(l,co(0,s,t));break e;case 1:i=s;var y=l.type,b=l.stateNode;if(0==(128&l.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Wi||!Wi.has(b)))){l.flags|=65536,t&=-t,l.lanes|=t,Tu(l,fo(l,i,t));break e}}l=l.return}while(null!==l)}ys(n)}catch(e){t=e,_i===n&&null!==n&&(_i=n=n.return);continue}break}}function ds(){var e=ki.current;return ki.current=no,null===e?no:e}function ps(){0!==Pi&&3!==Pi&&2!==Pi||(Pi=4),null===xi||0==(268435455&Bi)&&0==(268435455&Oi)||us(xi,Fi)}function hs(e,t){var n=Ai;Ai|=2;var r=ds();for(xi===e&&Fi===t||(Ui=null,cs(e,t));;)try{ms();break}catch(t){fs(e,t)}if(yu(),Ai=n,ki.current=r,null!==_i)throw Error(u(261));return xi=null,Fi=0,Pi}function ms(){for(;null!==_i;)gs(_i)}function vs(){for(;null!==_i&&!Ke();)gs(_i)}function gs(e){var t=wi(e.alternate,e,Ni);e.memoizedProps=e.pendingProps,null===t?ys(e):_i=t,Di.current=null}function ys(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ho(n,t,Ni)))return void(_i=n)}else{if(null!==(n=Qo(n,t)))return n.flags&=32767,void(_i=n);if(null===e)return Pi=6,void(_i=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(_i=t);_i=t=e}while(null!==t);0===Pi&&(Pi=5)}function bs(e,t,n){var r=bt,a=Si.transition;try{Si.transition=null,bt=1,function(e,t,n,r){do{Es()}while(null!==Qi);if(0!=(6&Ai))throw Error(u(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(u(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-lt(n),u=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~u}}(e,l),e===xi&&(_i=xi=null,Fi=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Hi||(Hi=!0,xs(tt,(function(){return Es(),null}))),l=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||l){l=Si.transition,Si.transition=null;var o=bt;bt=1;var i=Ai;Ai|=4,Di.current=null,function(e,t){if(Xr=Wt,cr(e=sr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var o=0,i=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(i=o+a),d!==l||0!==r&&3!==d.nodeType||(s=o+r),3===d.nodeType&&(o+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(i=o),p===l&&++f===r&&(s=o),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===i||-1===s?null:{start:i,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Jr={focusedElem:e,selectionRange:n},Wt=!1,Yo=t;null!==Yo;)if(e=(t=Yo).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Yo=e;else for(;null!==Yo;){t=Yo;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,g=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:pu(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var E=t.stateNode.containerInfo;1===E.nodeType?E.textContent="":9===E.nodeType&&E.documentElement&&E.removeChild(E.documentElement);break;default:throw Error(u(163))}}catch(e){Cs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Yo=e;break}Yo=t.return}m=Zo,Zo=!1}(e,n),hi(n,e),fr(Jr),Wt=!!Xr,Jr=Xr=null,e.current=n,vi(n,e,a),Ye(),Ai=i,bt=o,Si.transition=l}else e.current=n;if(Hi&&(Hi=!1,Qi=e,qi=a),0===(l=e.pendingLanes)&&(Wi=null),function(e){if(ut&&"function"==typeof ut.onCommitFiberRoot)try{ut.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ts(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Vi)throw Vi=!1,e=$i,$i=null,e;0!=(1&qi)&&0!==e.tag&&Es(),0!=(1&(l=e.pendingLanes))?e===Ki?Gi++:(Gi=0,Ki=e):Gi=0,za()}(e,t,n,r)}finally{Si.transition=a,bt=r}return null}function Es(){if(null!==Qi){var e=Et(qi),t=Si.transition,n=bt;try{if(Si.transition=null,bt=16>e?16:e,null===Qi)var r=!1;else{if(e=Qi,Qi=null,qi=0,0!=(6&Ai))throw Error(u(331));var a=Ai;for(Ai|=4,Yo=e.current;null!==Yo;){var l=Yo,o=l.child;if(0!=(16&Yo.flags)){var i=l.deletions;if(null!==i){for(var s=0;s<i.length;s++){var c=i[s];for(Yo=c;null!==Yo;){var f=Yo;switch(f.tag){case 0:case 11:case 15:ei(8,f,l)}var d=f.child;if(null!==d)d.return=f,Yo=d;else for(;null!==Yo;){var p=(f=Yo).sibling,h=f.return;if(ri(f),f===c){Yo=null;break}if(null!==p){p.return=h,Yo=p;break}Yo=h}}}var m=l.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Yo=l}}if(0!=(2064&l.subtreeFlags)&&null!==o)o.return=l,Yo=o;else e:for(;null!==Yo;){if(0!=(2048&(l=Yo).flags))switch(l.tag){case 0:case 11:case 15:ei(9,l,l.return)}var y=l.sibling;if(null!==y){y.return=l.return,Yo=y;break e}Yo=l.return}}var b=e.current;for(Yo=b;null!==Yo;){var E=(o=Yo).child;if(0!=(2064&o.subtreeFlags)&&null!==E)E.return=o,Yo=E;else e:for(o=b;null!==Yo;){if(0!=(2048&(i=Yo).flags))try{switch(i.tag){case 0:case 11:case 15:ti(9,i)}}catch(e){Cs(i,i.return,e)}if(i===o){Yo=null;break e}var w=i.sibling;if(null!==w){w.return=i.return,Yo=w;break e}Yo=i.return}}if(Ai=a,za(),ut&&"function"==typeof ut.onPostCommitFiberRoot)try{ut.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Si.transition=t}}return!1}function ws(e,t,n){e=Lu(e,t=co(0,t=lo(n,t),1),1),t=Ji(),null!==e&&(gt(e,1,t),ts(e,t))}function Cs(e,t,n){if(3===e.tag)ws(e,e,n);else for(;null!==t;){if(3===t.tag){ws(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wi||!Wi.has(r))){t=Lu(t,e=fo(t,e=lo(n,e),1),1),e=Ji(),null!==t&&(gt(t,1,e),ts(t,e));break}}t=t.return}}function ks(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Ji(),e.pingedLanes|=e.suspendedLanes&n,xi===e&&(Fi&n)===n&&(4===Pi||3===Pi&&(130023424&Fi)===Fi&&500>Xe()-zi?cs(e,0):Ri|=n),ts(e,t)}function Ds(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Ji();null!==(e=Au(e,t))&&(gt(e,t,n),ts(e,n))}function Ss(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ds(e,n)}function As(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(u(314))}null!==r&&r.delete(t),Ds(e,n)}function xs(e,t){return qe(e,t)}function _s(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Fs(e,t,n,r){return new _s(e,t,n,r)}function Ns(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ls(e,t){var n=e.alternate;return null===n?((n=Fs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ps(e,t,n,r,a,l){var o=2;if(r=e,"function"==typeof e)Ns(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case k:return Ts(n.children,a,l,t);case D:o=8,a|=8;break;case S:return(e=Fs(12,n,t,2|a)).elementType=S,e.lanes=l,e;case F:return(e=Fs(13,n,t,a)).elementType=F,e.lanes=l,e;case N:return(e=Fs(19,n,t,a)).elementType=N,e.lanes=l,e;case T:return Bs(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case A:o=10;break e;case x:o=9;break e;case _:o=11;break e;case L:o=14;break e;case P:o=16,r=null;break e}throw Error(u(130,null==e?e:typeof e,""))}return(t=Fs(o,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Ts(e,t,n,r){return(e=Fs(7,e,r,t)).lanes=n,e}function Bs(e,t,n,r){return(e=Fs(22,e,r,t)).elementType=T,e.lanes=n,e.stateNode={isHidden:!1},e}function Os(e,t,n){return(e=Fs(6,e,null,t)).lanes=n,e}function Rs(e,t,n){return(t=Fs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function js(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Ms(e,t,n,r,a,u,l,o,i){return e=new js(e,t,n,o,i),1===t?(t=1,!0===u&&(t|=8)):t=0,u=Fs(3,null,null,t),e.current=u,u.stateNode=e,u.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},_u(u),e}function zs(e){if(!e)return Da;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(u(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Fa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(u(171))}if(1===e.tag){var n=e.type;if(Fa(n))return Pa(e,n,t)}return t}function Is(e,t,n,r,a,u,l,o,i){return(e=Ms(n,r,!0,e,0,u,0,o,i)).context=zs(null),n=e.current,(u=Nu(r=Ji(),a=Zi(n))).callback=null!=t?t:null,Lu(n,u,a),e.current.lanes=a,gt(e,a,r),ts(e,r),e}function Us(e,t,n,r){var a=t.current,u=Ji(),l=Zi(a);return n=zs(n),null===t.context?t.context=n:t.pendingContext=n,(t=Nu(u,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Lu(a,t,l))&&(es(e,a,l,u),Pu(e,a,l)),l}function Vs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function $s(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ws(e,t){$s(e,t),(e=e.alternate)&&$s(e,t)}wi=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Aa.current)go=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return go=!1,function(e,t,n){switch(t.tag){case 3:xo(t),cu();break;case 5:nl(t);break;case 1:Fa(t.type)&&Ta(t);break;case 4:el(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;ka(hu,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(ka(al,1&al.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Oo(e,t,n):(ka(al,1&al.current),null!==(e=Vo(e,t,n))?e.sibling:null);ka(al,1&al.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Io(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ka(al,al.current),r)break;return null;case 22:case 23:return t.lanes=0,Co(e,t,n)}return Vo(e,t,n)}(e,t,n);go=0!=(131072&e.flags)}else go=!1,tu&&0!=(1048576&t.flags)&&Ya(t,$a,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Uo(e,t),e=t.pendingProps;var a=_a(t,Sa.current);wu(t,n),a=El(null,t,r,e,a,n);var l=wl();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Fa(r)?(l=!0,Ta(t)):l=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,_u(t),a.updater=Mu,t.stateNode=a,a._reactInternals=t,Vu(t,r,e,n),t=Ao(null,t,r,!0,l,n)):(t.tag=0,tu&&l&&Xa(t),yo(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Uo(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ns(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===L)return 14}return 2}(r),e=pu(r,e),a){case 0:t=Do(null,t,r,e,n);break e;case 1:t=So(null,t,r,e,n);break e;case 11:t=bo(null,t,r,e,n);break e;case 14:t=Eo(null,t,r,pu(r.type,e),n);break e}throw Error(u(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Do(e,t,r,a=t.elementType===r?a:pu(r,a),n);case 1:return r=t.type,a=t.pendingProps,So(e,t,r,a=t.elementType===r?a:pu(r,a),n);case 3:e:{if(xo(t),null===e)throw Error(u(387));r=t.pendingProps,a=(l=t.memoizedState).element,Fu(e,t),Bu(t,r,null,n);var o=t.memoizedState;if(r=o.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=_o(e,t,r,n,a=lo(Error(u(423)),t));break e}if(r!==a){t=_o(e,t,r,n,a=lo(Error(u(424)),t));break e}for(eu=la(t.stateNode.containerInfo.firstChild),Za=t,tu=!0,nu=null,n=Gu(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(cu(),r===a){t=Vo(e,t,n);break e}yo(e,t,r,n)}t=t.child}return t;case 5:return nl(t),null===e&&lu(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,o=a.children,Zr(r,a)?o=null:null!==l&&Zr(r,l)&&(t.flags|=32),ko(e,t),yo(e,t,o,n),t.child;case 6:return null===e&&lu(t),null;case 13:return Oo(e,t,n);case 4:return el(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=qu(t,null,r,n):yo(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,bo(e,t,r,a=t.elementType===r?a:pu(r,a),n);case 7:return yo(e,t,t.pendingProps,n),t.child;case 8:case 12:return yo(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,o=a.value,ka(hu,r._currentValue),r._currentValue=o,null!==l)if(ar(l.value,o)){if(l.children===a.children&&!Aa.current){t=Vo(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var i=l.dependencies;if(null!==i){o=l.child;for(var s=i.firstContext;null!==s;){if(s.context===r){if(1===l.tag){(s=Nu(-1,n&-n)).tag=2;var c=l.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),Eu(l.return,n,t),i.lanes|=n;break}s=s.next}}else if(10===l.tag)o=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(o=l.return))throw Error(u(341));o.lanes|=n,null!==(i=o.alternate)&&(i.lanes|=n),Eu(o,n,t),o=l.sibling}else o=l.child;if(null!==o)o.return=l;else for(o=l;null!==o;){if(o===t){o=null;break}if(null!==(l=o.sibling)){l.return=o.return,o=l;break}o=o.return}l=o}yo(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,wu(t,n),r=r(a=Cu(a)),t.flags|=1,yo(e,t,r,n),t.child;case 14:return a=pu(r=t.type,t.pendingProps),Eo(e,t,r,a=pu(r.type,a),n);case 15:return wo(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:pu(r,a),Uo(e,t),t.tag=1,Fa(r)?(e=!0,Ta(t)):e=!1,wu(t,n),Iu(t,r,a),Vu(t,r,a,n),Ao(null,t,r,!0,e,n);case 19:return Io(e,t,n);case 22:return Co(e,t,n)}throw Error(u(156,t.tag))};var Hs="function"==typeof reportError?reportError:function(e){console.error(e)};function Qs(e){this._internalRoot=e}function qs(e){this._internalRoot=e}function Gs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ks(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ys(){}function Xs(e,t,n,r,a){var u=n._reactRootContainer;if(u){var l=u;if("function"==typeof a){var o=a;a=function(){var e=Vs(l);o.call(e)}}Us(t,l,e,a)}else l=function(e,t,n,r,a){if(a){if("function"==typeof r){var u=r;r=function(){var e=Vs(l);u.call(e)}}var l=Is(t,r,e,0,null,!1,0,"",Ys);return e._reactRootContainer=l,e[fa]=l.current,zr(8===e.nodeType?e.parentNode:e),is(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var o=r;r=function(){var e=Vs(i);o.call(e)}}var i=Ms(e,0,!1,null,0,!1,0,"",Ys);return e._reactRootContainer=i,e[fa]=i.current,zr(8===e.nodeType?e.parentNode:e),is((function(){Us(t,i,n,r)})),i}(n,t,e,a,r);return Vs(l)}qs.prototype.render=Qs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(u(409));Us(e,t,null,null)},qs.prototype.unmount=Qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;is((function(){Us(null,e,null,null)})),t[fa]=null}},qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=Dt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Tt.length&&0!==t&&t<Tt[n].priority;n++);Tt.splice(n,0,e),0===n&&jt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),ts(t,Xe()),0==(6&Ai)&&(Ii=Xe()+500,za()))}break;case 13:is((function(){var t=Au(e,1);if(null!==t){var n=Ji();es(t,e,1,n)}})),Ws(e,1)}},Ct=function(e){if(13===e.tag){var t=Au(e,134217728);null!==t&&es(t,e,134217728,Ji()),Ws(e,134217728)}},kt=function(e){if(13===e.tag){var t=Zi(e),n=Au(e,t);null!==n&&es(n,e,t,Ji()),Ws(e,t)}},Dt=function(){return bt},St=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ce=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ya(r);if(!a)throw Error(u(90));q(r),J(r,a)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=os,Fe=is;var Js={usingClientEntryPoint:!1,Events:[va,ga,ya,Ae,xe,os]},Zs={findFiberByHostInstance:ma,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ec={bundleType:Zs.bundleType,version:Zs.version,rendererPackageName:Zs.rendererPackageName,rendererConfig:Zs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:Zs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var tc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!tc.isDisabled&&tc.supportsFiber)try{at=tc.inject(ec),ut=tc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Js,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gs(t))throw Error(u(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Gs(e))throw Error(u(299));var n=!1,r="",a=Hs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Ms(e,1,!1,null,0,n,0,r,a),e[fa]=t.current,zr(8===e.nodeType?e.parentNode:e),new Qs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(u(188));throw e=Object.keys(e).join(","),Error(u(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return is(e)},t.hydrate=function(e,t,n){if(!Ks(t))throw Error(u(200));return Xs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Gs(e))throw Error(u(405));var r=null!=n&&n.hydratedSources||null,a=!1,l="",o=Hs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Is(t,null,e,1,null!=n?n:null,a,0,l,o),e[fa]=t.current,zr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new qs(t)},t.render=function(e,t,n){if(!Ks(t))throw Error(u(200));return Xs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ks(e))throw Error(u(40));return!!e._reactRootContainer&&(is((function(){Xs(null,null,e,!1,(function(){e._reactRootContainer=null,e[fa]=null}))})),!0)},t.unstable_batchedUpdates=os,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ks(n))throw Error(u(200));if(null==e||void 0===e._reactInternals)throw Error(u(38));return Xs(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),u=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),i=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var E=b.prototype=new y;E.constructor=b,m(E,g.prototype),E.isPureReactComponent=!0;var w=Array.isArray,C=Object.prototype.hasOwnProperty,k={current:null},D={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var a,u={},l=null,o=null;if(null!=t)for(a in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(l=""+t.key),t)C.call(t,a)&&!D.hasOwnProperty(a)&&(u[a]=t[a]);var i=arguments.length-2;if(1===i)u.children=r;else if(1<i){for(var s=Array(i),c=0;c<i;c++)s[c]=arguments[c+2];u.children=s}if(e&&e.defaultProps)for(a in i=e.defaultProps)void 0===u[a]&&(u[a]=i[a]);return{$$typeof:n,type:e,key:l,ref:o,props:u,_owner:k.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var x=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function F(e,t,a,u,l){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case n:case r:i=!0}}if(i)return l=l(i=e),e=""===u?"."+_(i,0):u,w(l)?(a="",null!=e&&(a=e.replace(x,"$&/")+"/"),F(l,t,a,"",(function(e){return e}))):null!=l&&(A(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||i&&i.key===l.key?"":(""+l.key).replace(x,"$&/")+"/")+e)),t.push(l)),1;if(i=0,u=""===u?".":u+":",w(e))for(var s=0;s<e.length;s++){var c=u+_(o=e[s],s);i+=F(o,t,a,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(o=e.next()).done;)i+=F(o=o.value,t,a,c=u+_(o,s++),l);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return i}function N(e,t,n){if(null==e)return e;var r=[],a=0;return F(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function L(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var P={current:null},T={transition:null},B={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:T,ReactCurrentOwner:k};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!A(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=l,t.PureComponent=b,t.StrictMode=u,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),u=e.key,l=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,o=k.current),void 0!==t.key&&(u=""+t.key),e.type&&e.type.defaultProps)var i=e.type.defaultProps;for(s in t)C.call(t,s)&&!D.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==i?i[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){i=Array(s);for(var c=0;c<s;c++)i[c]=arguments[c+2];a.children=i}return{$$typeof:n,type:e.type,key:u,ref:l,props:a,_owner:o}},t.createContext=function(e){return(e={$$typeof:i,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=A,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return P.current.useCallback(e,t)},t.useContext=function(e){return P.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return P.current.useDeferredValue(e)},t.useEffect=function(e,t){return P.current.useEffect(e,t)},t.useId=function(){return P.current.useId()},t.useImperativeHandle=function(e,t,n){return P.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return P.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return P.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return P.current.useMemo(e,t)},t.useReducer=function(e,t,n){return P.current.useReducer(e,t,n)},t.useRef=function(e){return P.current.useRef(e)},t.useState=function(e){return P.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return P.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return P.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<u(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var o=2*(r+1)-1,i=e[o],s=o+1,c=e[s];if(0>u(i,n))s<a&&0>u(c,i)?(e[r]=c,e[s]=n,r=s):(e[r]=i,e[o]=n,r=o);else{if(!(s<a&&0>u(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function u(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var o=Date,i=o.now();t.unstable_now=function(){return o.now()-i}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function E(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function w(e){if(v=!1,E(e),!m)if(null!==r(s))m=!0,T(C);else{var t=r(c);null!==t&&B(w,t.startTime-e)}}function C(e,n){m=!1,v&&(v=!1,y(A),A=-1),h=!0;var u=p;try{for(E(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!F());){var l=d.callback;if("function"==typeof l){d.callback=null,p=d.priorityLevel;var o=l(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?d.callback=o:d===r(s)&&a(s),E(n)}else a(s);d=r(s)}if(null!==d)var i=!0;else{var f=r(c);null!==f&&B(w,f.startTime-n),i=!1}return i}finally{d=null,p=u,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,D=!1,S=null,A=-1,x=5,_=-1;function F(){return!(t.unstable_now()-_<x)}function N(){if(null!==S){var e=t.unstable_now();_=e;var n=!0;try{n=S(!0,e)}finally{n?k():(D=!1,S=null)}}else D=!1}if("function"==typeof b)k=function(){b(N)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,P=L.port2;L.port1.onmessage=N,k=function(){P.postMessage(null)}}else k=function(){g(N,0)};function T(e){S=e,D||(D=!0,k())}function B(e,n){A=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,T(C))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):x=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,u){var l=t.unstable_now();switch(u="object"==typeof u&&null!==u&&"number"==typeof(u=u.delay)&&0<u?l+u:l,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:u,expirationTime:o=u+o,sortIndex:-1},u>l?(e.sortIndex=u,n(c,e),null===r(s)&&e===r(c)&&(v?(y(A),A=-1):v=!0,B(w,u-l))):(e.sortIndex=o,n(s,e),m||h||(m=!0,T(C))),e},t.unstable_shouldYield=F,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var u=r[e]={exports:{}};return n[e](u,u.exports,a),u.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var u=Object.create(null);a.r(u);var l={};e=e||[null,t({}),t([]),t(t)];for(var o=2&r&&n;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,a.d(u,l),u},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{"use strict";var e=a(294),t=a.t(e,2),n=a(745);const r=e.createContext();function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function l(){l=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function f(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{f({},"")}catch(e){f=function(e,t,n){return e[t]=n}}function d(e,t,n,r){var u=t&&t.prototype instanceof b?t:b,l=Object.create(u.prototype),o=new P(r||[]);return a(l,"_invoke",{value:_(e,n,o)}),l}function p(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=d;var h="suspendedStart",m="suspendedYield",v="executing",g="completed",y={};function b(){}function E(){}function w(){}var C={};f(C,i,(function(){return this}));var k=Object.getPrototypeOf,D=k&&k(k(T([])));D&&D!==n&&r.call(D,i)&&(C=D);var S=w.prototype=b.prototype=Object.create(C);function A(e){["next","throw","return"].forEach((function(t){f(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(a,l,o,i){var s=p(e[a],e,l);if("throw"!==s.type){var c=s.arg,f=c.value;return f&&"object"==u(f)&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,o,i)}),(function(e){n("throw",e,o,i)})):t.resolve(f).then((function(e){c.value=e,o(c)}),(function(e){return n("throw",e,o,i)}))}i(s.arg)}var l;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return l=l?l.then(a,a):a()}})}function _(t,n,r){var a=h;return function(u,l){if(a===v)throw new Error("Generator is already running");if(a===g){if("throw"===u)throw l;return{value:e,done:!0}}for(r.method=u,r.arg=l;;){var o=r.delegate;if(o){var i=F(o,r);if(i){if(i===y)continue;return i}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===h)throw a=g,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=v;var s=p(t,n,r);if("normal"===s.type){if(a=r.done?g:m,s.arg===y)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=g,r.method="throw",r.arg=s.arg)}}}function F(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,F(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var u=p(a,t.iterator,n.arg);if("throw"===u.type)return n.method="throw",n.arg=u.arg,n.delegate=null,y;var l=u.arg;return l?l.done?(n[t.resultName]=l.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):l:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function N(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(N,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,l=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return l.next=l}}throw new TypeError(u(t)+" is not iterable")}return E.prototype=w,a(S,"constructor",{value:w,configurable:!0}),a(w,"constructor",{value:E,configurable:!0}),E.displayName=f(w,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===E||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,w):(e.__proto__=w,f(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},A(x.prototype),f(x.prototype,s,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,a,u){void 0===u&&(u=Promise);var l=new x(d(e,n,r,a),u);return t.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},A(S),f(S,c,"Generator"),f(S,i,(function(){return this})),f(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return o.type="throw",o.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var u=this.tryEntries.length-1;u>=0;--u){var l=this.tryEntries[u],o=l.completion;if("root"===l.tryLoc)return a("end");if(l.tryLoc<=this.prev){var i=r.call(l,"catchLoc"),s=r.call(l,"finallyLoc");if(i&&s){if(this.prev<l.catchLoc)return a(l.catchLoc,!0);if(this.prev<l.finallyLoc)return a(l.finallyLoc)}else if(i){if(this.prev<l.catchLoc)return a(l.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<l.finallyLoc)return a(l.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var u=a;break}}u&&("break"===e||"continue"===e)&&u.tryLoc<=t&&t<=u.finallyLoc&&(u=null);var l=u?u.completion:{};return l.type=e,l.arg=t,u?(this.method="next",this.next=u.finallyLoc,y):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function i(e,t,n,r,a,u,l){try{var o=e[u](l),i=o.value}catch(e){return void n(e)}o.done?t(i):Promise.resolve(i).then(r,a)}const s=function(t){var n=t.children;function a(){var e;return e=l().mark((function e(){return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:try{fetch("/clear-cookie",{method:"GET",credentials:"include"}).then((function(e){if(e.redirected)return window.location.replace(e.url)})).catch((function(e){console.error("Error clearing cookies",e)}))}catch(e){console.log(e)}case 1:case"end":return e.stop()}}),e)})),a=function(){var t=this,n=arguments;return new Promise((function(r,a){var u=e.apply(t,n);function l(e){i(u,r,a,l,o,"next",e)}function o(e){i(u,r,a,l,o,"throw",e)}l(void 0)}))},a.apply(this,arguments)}var u=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,u,l,o=[],i=!0,s=!1;try{if(u=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;i=!1}else for(;!(i=(r=u.call(n)).done)&&(o.push(r.value),o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{if(!i&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,e.useState)(JSON.parse(localStorage.getItem("isAuthenticated"))||!1),2),s=u[0],c=u[1];(0,e.useEffect)((function(){localStorage.setItem("isAuthenticated",JSON.stringify(s))}),[s]);var f=function(){c(!0)},d=function(){c(!1),localStorage.clear(),function(){a.apply(this,arguments)}()},p=(0,e.useMemo)((function(){return{isAuthenticated:s,login:f,logout:d}}),[]);return e.createElement(r.Provider,{value:p},n)};var c,f=a(935),d=a.t(f,2);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},p.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(c||(c={}));const h="popstate";function m(e,t){if(!1===e||null==e)throw new Error(t)}function v(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function g(e,t){return{usr:e.state,key:e.key,idx:t}}function y(e,t,n,r){return void 0===n&&(n=null),p({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?E(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function b(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function E(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var w;function C(e,t,n){void 0===n&&(n="/");let r=R(("string"==typeof t?E(t):t).pathname||"/",n);if(null==r)return null;let a=k(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let u=null;for(let e=0;null==u&&e<a.length;++e)u=T(a[e],O(r));return u}function k(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,u)=>{let l={relativePath:void 0===u?e.path||"":u,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(m(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let o=I([r,l.relativePath]),i=n.concat(l);e.children&&e.children.length>0&&(m(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+o+'".'),k(e.children,t,i,o)),(null!=e.path||e.index)&&t.push({path:o,score:P(o,e.index),routesMeta:i})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of D(e.path))a(e,t,n);else a(e,t)})),t}function D(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),u=n.replace(/\?$/,"");if(0===r.length)return a?[u,""]:[u];let l=D(r.join("/")),o=[];return o.push(...l.map((e=>""===e?u:[u,e].join("/")))),a&&o.push(...l),o.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(w||(w={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const S=/^:\w+$/,A=3,x=2,_=1,F=10,N=-2,L=e=>"*"===e;function P(e,t){let n=e.split("/"),r=n.length;return n.some(L)&&(r+=N),t&&(r+=x),n.filter((e=>!L(e))).reduce(((e,t)=>e+(S.test(t)?A:""===t?_:F)),r)}function T(e,t){let{routesMeta:n}=e,r={},a="/",u=[];for(let e=0;e<n.length;++e){let l=n[e],o=e===n.length-1,i="/"===a?t:t.slice(a.length)||"/",s=B({path:l.relativePath,caseSensitive:l.caseSensitive,end:o},i);if(!s)return null;Object.assign(r,s.params);let c=l.route;u.push({params:r,pathname:I([a,s.pathname]),pathnameBase:U(I([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=I([a,s.pathnameBase]))}return u}function B(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),v("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let u=a[0],l=u.replace(/(.)\/+$/,"$1"),o=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=o[n]||"";l=u.slice(0,u.length-e.length).replace(/(.)\/+$/,"$1")}const i=o[n];return e[r]=a&&!i?void 0:function(e,t){try{return decodeURIComponent(e)}catch(n){return v(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(i||"",r),e}),{}),pathname:u,pathnameBase:l,pattern:e}}function O(e){try{return decodeURI(e)}catch(t){return v(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function R(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function j(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function M(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function z(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=E(e):(a=p({},e),m(!a.pathname||!a.pathname.includes("?"),j("?","pathname","search",a)),m(!a.pathname||!a.pathname.includes("#"),j("#","pathname","hash",a)),m(!a.search||!a.search.includes("#"),j("#","search","hash",a)));let u,l=""===e||""===a.pathname,o=l?"/":a.pathname;if(null==o)u=n;else if(r){let e=t[t.length-1].replace(/^\//,"").split("/");if(o.startsWith("..")){let t=o.split("/");for(;".."===t[0];)t.shift(),e.pop();a.pathname=t.join("/")}u="/"+e.join("/")}else{let e=t.length-1;if(o.startsWith("..")){let t=o.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}u=e>=0?t[e]:"/"}let i=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?E(e):e,u=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:u,search:V(r),hash:$(a)}}(a,u),s=o&&"/"!==o&&o.endsWith("/"),c=(l||"."===o)&&n.endsWith("/");return i.pathname.endsWith("/")||!s&&!c||(i.pathname+="/"),i}const I=e=>e.join("/").replace(/\/\/+/g,"/"),U=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),V=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",$=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const W=["post","put","patch","delete"],H=(new Set(W),["get",...W]);function Q(){return Q=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Q.apply(this,arguments)}new Set(H),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const q=e.createContext(null),G=e.createContext(null),K=e.createContext(null),Y=e.createContext(null),X=e.createContext({outlet:null,matches:[],isDataRoute:!1}),J=e.createContext(null);function Z(){return null!=e.useContext(Y)}function ee(){return Z()||m(!1),e.useContext(Y).location}function te(t){e.useContext(K).static||e.useLayoutEffect(t)}function ne(){let{isDataRoute:t}=e.useContext(X);return t?function(){let{router:t}=function(t){let n=e.useContext(q);return n||m(!1),n}(se.UseNavigateStable),n=fe(ce.UseNavigateStable),r=e.useRef(!1);return te((()=>{r.current=!0})),e.useCallback((function(e,a){void 0===a&&(a={}),r.current&&("number"==typeof e?t.navigate(e):t.navigate(e,Q({fromRouteId:n},a)))}),[t,n])}():function(){Z()||m(!1);let t=e.useContext(q),{basename:n,navigator:r}=e.useContext(K),{matches:a}=e.useContext(X),{pathname:u}=ee(),l=JSON.stringify(M(a).map((e=>e.pathnameBase))),o=e.useRef(!1);return te((()=>{o.current=!0})),e.useCallback((function(e,a){if(void 0===a&&(a={}),!o.current)return;if("number"==typeof e)return void r.go(e);let i=z(e,JSON.parse(l),u,"path"===a.relative);null==t&&"/"!==n&&(i.pathname="/"===i.pathname?n:I([n,i.pathname])),(a.replace?r.replace:r.push)(i,a.state,a)}),[n,r,l,u,t])}()}function re(t,n){let{relative:r}=void 0===n?{}:n,{matches:a}=e.useContext(X),{pathname:u}=ee(),l=JSON.stringify(M(a).map((e=>e.pathnameBase)));return e.useMemo((()=>z(t,JSON.parse(l),u,"path"===r)),[t,l,u,r])}function ae(t,n,r){Z()||m(!1);let{navigator:a}=e.useContext(K),{matches:u}=e.useContext(X),l=u[u.length-1],o=l?l.params:{},i=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let s,f=ee();if(n){var d;let e="string"==typeof n?E(n):n;"/"===i||(null==(d=e.pathname)?void 0:d.startsWith(i))||m(!1),s=e}else s=f;let p=s.pathname||"/",h=C(t,{pathname:"/"===i?p:p.slice(i.length)||"/"}),v=function(t,n,r){var a;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==t){var u;if(null==(u=r)||!u.errors)return null;t=r.matches}let l=t,o=null==(a=r)?void 0:a.errors;if(null!=o){let e=l.findIndex((e=>e.route.id&&(null==o?void 0:o[e.route.id])));e>=0||m(!1),l=l.slice(0,Math.min(l.length,e+1))}return l.reduceRight(((t,a,u)=>{let i=a.route.id?null==o?void 0:o[a.route.id]:null,s=null;r&&(s=a.route.errorElement||le);let c=n.concat(l.slice(0,u+1)),f=()=>{let n;return n=i?s:a.route.Component?e.createElement(a.route.Component,null):a.route.element?a.route.element:t,e.createElement(ie,{match:a,routeContext:{outlet:t,matches:c,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===u)?e.createElement(oe,{location:r.location,revalidation:r.revalidation,component:s,error:i,children:f(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):f()}),null)}(h&&h.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:I([i,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?i:I([i,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),u,r);return n&&v?e.createElement(Y.Provider,{value:{location:Q({pathname:"/",search:"",hash:"",state:null,key:"default"},s),navigationType:c.Pop}},v):v}function ue(){let t=function(){var t;let n=e.useContext(J),r=function(t){let n=e.useContext(G);return n||m(!1),n}(ce.UseRouteError),a=fe(ce.UseRouteError);return n||(null==(t=r.errors)?void 0:t[a])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(t)?t.status+" "+t.statusText:t instanceof Error?t.message:JSON.stringify(t),r=t instanceof Error?t.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return e.createElement(e.Fragment,null,e.createElement("h2",null,"Unexpected Application Error!"),e.createElement("h3",{style:{fontStyle:"italic"}},n),r?e.createElement("pre",{style:a},r):null,null)}const le=e.createElement(ue,null);class oe extends e.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?e.createElement(X.Provider,{value:this.props.routeContext},e.createElement(J.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ie(t){let{routeContext:n,match:r,children:a}=t,u=e.useContext(q);return u&&u.static&&u.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(u.staticContext._deepestRenderedBoundaryId=r.route.id),e.createElement(X.Provider,{value:n},a)}var se=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(se||{}),ce=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ce||{});function fe(t){let n=function(t){let n=e.useContext(X);return n||m(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||m(!1),r.route.id}function de(e){m(!1)}function pe(t){let{basename:n="/",children:r=null,location:a,navigationType:u=c.Pop,navigator:l,static:o=!1}=t;Z()&&m(!1);let i=n.replace(/^\/*/,"/"),s=e.useMemo((()=>({basename:i,navigator:l,static:o})),[i,l,o]);"string"==typeof a&&(a=E(a));let{pathname:f="/",search:d="",hash:p="",state:h=null,key:v="default"}=a,g=e.useMemo((()=>{let e=R(f,i);return null==e?null:{location:{pathname:e,search:d,hash:p,state:h,key:v},navigationType:u}}),[i,f,d,p,h,v,u]);return null==g?null:e.createElement(K.Provider,{value:s},e.createElement(Y.Provider,{children:r,value:g}))}function he(e){let{children:t,location:n}=e;return ae(me(t),n)}function me(t,n){void 0===n&&(n=[]);let r=[];return e.Children.forEach(t,((t,a)=>{if(!e.isValidElement(t))return;let u=[...n,a];if(t.type===e.Fragment)return void r.push.apply(r,me(t.props.children,u));t.type!==de&&m(!1),t.props.index&&t.props.children&&m(!1);let l={id:t.props.id||u.join("-"),caseSensitive:t.props.caseSensitive,element:t.props.element,Component:t.props.Component,index:t.props.index,path:t.props.path,loader:t.props.loader,action:t.props.action,errorElement:t.props.errorElement,ErrorBoundary:t.props.ErrorBoundary,hasErrorBoundary:null!=t.props.ErrorBoundary||null!=t.props.errorElement,shouldRevalidate:t.props.shouldRevalidate,handle:t.props.handle,lazy:t.props.lazy};t.props.children&&(l.children=me(t.props.children,u)),r.push(l)})),r}function ve(){return ve=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ve.apply(this,arguments)}t.startTransition,new Promise((()=>{})),e.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const ge=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"];new Map;const ye=t.startTransition;function be(t){let{basename:n,children:r,future:a,window:u}=t,l=e.useRef();var o;null==l.current&&(l.current=(void 0===(o={window:u,v5Compat:!0})&&(o={}),function(e,t,n,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:u=!1}=r,l=a.history,o=c.Pop,i=null,s=f();function f(){return(l.state||{idx:null}).idx}function d(){o=c.Pop;let e=f(),t=null==e?null:e-s;s=e,i&&i({action:o,location:E.location,delta:t})}function v(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:b(e);return m(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==s&&(s=0,l.replaceState(p({},l.state,{idx:s}),""));let E={get action(){return o},get location(){return e(a,l)},listen(e){if(i)throw new Error("A history only accepts one active listener");return a.addEventListener(h,d),i=e,()=>{a.removeEventListener(h,d),i=null}},createHref:e=>t(a,e),createURL:v,encodeLocation(e){let t=v(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){o=c.Push;let r=y(E.location,e,t);n&&n(r,e),s=f()+1;let d=g(r,s),p=E.createHref(r);try{l.pushState(d,"",p)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(p)}u&&i&&i({action:o,location:E.location,delta:1})},replace:function(e,t){o=c.Replace;let r=y(E.location,e,t);n&&n(r,e),s=f();let a=g(r,s),d=E.createHref(r);l.replaceState(a,"",d),u&&i&&i({action:o,location:E.location,delta:0})},go:e=>l.go(e)};return E}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return y("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:b(t)}),null,o)));let i=l.current,[s,f]=e.useState({action:i.action,location:i.location}),{v7_startTransition:d}=a||{},v=e.useCallback((e=>{d&&ye?ye((()=>f(e))):f(e)}),[f,d]);return e.useLayoutEffect((()=>i.listen(v)),[i,v]),e.createElement(pe,{basename:n,children:r,location:s.location,navigationType:s.action,navigator:i})}d.flushSync;const Ee="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,we=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ce=e.forwardRef((function(t,n){let r,{onClick:a,relative:u,reloadDocument:l,replace:o,state:i,target:s,to:c,preventScrollReset:f,unstable_viewTransition:d}=t,p=function(e,t){if(null==e)return{};var n,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(t,ge),{basename:h}=e.useContext(K),v=!1;if("string"==typeof c&&we.test(c)&&(r=c,Ee))try{let e=new URL(window.location.href),t=c.startsWith("//")?new URL(e.protocol+c):new URL(c),n=R(t.pathname,h);t.origin===e.origin&&null!=n?c=n+t.search+t.hash:v=!0}catch(e){}let g=function(t,n){let{relative:r}=void 0===n?{}:n;Z()||m(!1);let{basename:a,navigator:u}=e.useContext(K),{hash:l,pathname:o,search:i}=re(t,{relative:r}),s=o;return"/"!==a&&(s="/"===o?a:I([a,o])),u.createHref({pathname:s,search:i,hash:l})}(c,{relative:u}),y=function(t,n){let{target:r,replace:a,state:u,preventScrollReset:l,relative:o,unstable_viewTransition:i}=void 0===n?{}:n,s=ne(),c=ee(),f=re(t,{relative:o});return e.useCallback((e=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(e,r)){e.preventDefault();let n=void 0!==a?a:b(c)===b(f);s(t,{replace:n,state:u,preventScrollReset:l,relative:o,unstable_viewTransition:i})}}),[c,s,f,a,u,r,t,l,o,i])}(c,{replace:o,state:i,target:s,preventScrollReset:f,relative:u,unstable_viewTransition:d});return e.createElement("a",ve({},p,{href:r||g,onClick:v||l?a:function(e){a&&a(e),e.defaultPrevented||y(e)},ref:n,target:s}))}));var ke,De;function Se(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(ke||(ke={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(De||(De={}));var Ae=function e(t,n){function r(e,r,a){if("undefined"!=typeof document){"number"==typeof(a=Se({},n,a)).expires&&(a.expires=new Date(Date.now()+864e5*a.expires)),a.expires&&(a.expires=a.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var u="";for(var l in a)a[l]&&(u+="; "+l,!0!==a[l]&&(u+="="+a[l].split(";")[0]));return document.cookie=e+"="+t.write(r,e)+u}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],r={},a=0;a<n.length;a++){var u=n[a].split("="),l=u.slice(1).join("=");try{var o=decodeURIComponent(u[0]);if(r[o]=t.read(l,o),e===o)break}catch(e){}}return e?r[e]:r}},remove:function(e,t){r(e,"",Se({},t,{expires:-1}))},withAttributes:function(t){return e(this.converter,Se({},this.attributes,t))},withConverter:function(t){return e(Se({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"}),xe=e=>"checkbox"===e.type,_e=e=>e instanceof Date,Fe=e=>null==e;const Ne=e=>"object"==typeof e;var Le=e=>!Fe(e)&&!Array.isArray(e)&&Ne(e)&&!_e(e),Pe=e=>Le(e)&&e.target?xe(e.target)?e.target.checked:e.target.value:e,Te=(e,t)=>e.has((e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e)(t)),Be=e=>{const t=e.constructor&&e.constructor.prototype;return Le(t)&&t.hasOwnProperty("isPrototypeOf")},Oe="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function Re(e){let t;const n=Array.isArray(e);if(e instanceof Date)t=new Date(e);else if(e instanceof Set)t=new Set(e);else{if(Oe&&(e instanceof Blob||e instanceof FileList)||!n&&!Le(e))return e;if(t=n?[]:{},n||Be(e))for(const n in e)e.hasOwnProperty(n)&&(t[n]=Re(e[n]));else t=e}return t}var je=e=>Array.isArray(e)?e.filter(Boolean):[],Me=e=>void 0===e,ze=(e,t,n)=>{if(!t||!Le(e))return n;const r=je(t.split(/[,[\].]+?/)).reduce(((e,t)=>Fe(e)?e:e[t]),e);return Me(r)||r===e?Me(e[t])?n:e[t]:r},Ie=e=>"boolean"==typeof e;const Ue={BLUR:"blur",FOCUS_OUT:"focusout",CHANGE:"change"},Ve={onBlur:"onBlur",onChange:"onChange",onSubmit:"onSubmit",onTouched:"onTouched",all:"all"},$e="pattern",We="required",He=e.createContext(null),Qe=()=>e.useContext(He);var qe=(e,t,n,r=!0)=>{const a={defaultValues:t._defaultValues};for(const u in e)Object.defineProperty(a,u,{get:()=>{const a=u;return t._proxyFormState[a]!==Ve.all&&(t._proxyFormState[a]=!r||Ve.all),n&&(n[a]=!0),e[a]}});return a},Ge=e=>Le(e)&&!Object.keys(e).length,Ke=(e,t,n,r)=>{n(e);const{name:a,...u}=e;return Ge(u)||Object.keys(u).length>=Object.keys(t).length||Object.keys(u).find((e=>t[e]===(!r||Ve.all)))},Ye=e=>Array.isArray(e)?e:[e],Xe=(e,t,n)=>!e||!t||e===t||Ye(e).some((e=>e&&(n?e===t:e.startsWith(t)||t.startsWith(e))));function Je(t){const n=e.useRef(t);n.current=t,e.useEffect((()=>{const e=!t.disabled&&n.current.subject&&n.current.subject.subscribe({next:n.current.next});return()=>{e&&e.unsubscribe()}}),[t.disabled])}var Ze=e=>"string"==typeof e,et=(e,t,n,r,a)=>Ze(e)?(r&&t.watch.add(e),ze(n,e,a)):Array.isArray(e)?e.map((e=>(r&&t.watch.add(e),ze(n,e)))):(r&&(t.watchAll=!0),n);var tt=e=>/^\w*$/.test(e),nt=e=>je(e.replace(/["|']|\]/g,"").split(/\.|\[/));function rt(e,t,n){let r=-1;const a=tt(t)?[t]:nt(t),u=a.length,l=u-1;for(;++r<u;){const t=a[r];let u=n;if(r!==l){const n=e[t];u=Le(n)||Array.isArray(n)?n:isNaN(+a[r+1])?{}:[]}e[t]=u,e=e[t]}return e}var at=(e,t,n,r,a)=>t?{...n[e],types:{...n[e]&&n[e].types?n[e].types:{},[r]:a||!0}}:{},ut=e=>({isOnSubmit:!e||e===Ve.onSubmit,isOnBlur:e===Ve.onBlur,isOnChange:e===Ve.onChange,isOnAll:e===Ve.all,isOnTouch:e===Ve.onTouched}),lt=(e,t,n)=>!n&&(t.watchAll||t.watch.has(e)||[...t.watch].some((t=>e.startsWith(t)&&/^\.\w+/.test(e.slice(t.length)))));const ot=(e,t,n,r)=>{for(const a of n||Object.keys(e)){const n=ze(e,a);if(n){const{_f:e,...u}=n;if(e){if(e.refs&&e.refs[0]&&t(e.refs[0],a)&&!r)break;if(e.ref&&t(e.ref,e.name)&&!r)break}else Le(u)&&ot(u,t)}}};var it=(e,t,n)=>{const r=je(ze(e,n));return rt(r,"root",t[n]),rt(e,n,r),e},st=e=>"file"===e.type,ct=e=>"function"==typeof e,ft=e=>{if(!Oe)return!1;const t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},dt=e=>Ze(e),pt=e=>"radio"===e.type,ht=e=>e instanceof RegExp;const mt={value:!1,isValid:!1},vt={value:!0,isValid:!0};var gt=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!Me(e[0].attributes.value)?Me(e[0].value)||""===e[0].value?vt:{value:e[0].value,isValid:!0}:vt:mt}return mt};const yt={isValid:!1,value:null};var bt=e=>Array.isArray(e)?e.reduce(((e,t)=>t&&t.checked&&!t.disabled?{isValid:!0,value:t.value}:e),yt):yt;function Et(e,t,n="validate"){if(dt(e)||Array.isArray(e)&&e.every(dt)||Ie(e)&&!e)return{type:n,message:dt(e)?e:"",ref:t}}var wt=e=>Le(e)&&!ht(e)?e:{value:e,message:""},Ct=async(e,t,n,r,a)=>{const{ref:u,refs:l,required:o,maxLength:i,minLength:s,min:c,max:f,pattern:d,validate:p,name:h,valueAsNumber:m,mount:v,disabled:g}=e._f,y=ze(t,h);if(!v||g)return{};const b=l?l[0]:u,E=e=>{r&&b.reportValidity&&(b.setCustomValidity(Ie(e)?"":e||""),b.reportValidity())},w={},C=pt(u),k=xe(u),D=C||k,S=(m||st(u))&&Me(u.value)&&Me(y)||ft(u)&&""===u.value||""===y||Array.isArray(y)&&!y.length,A=at.bind(null,h,n,w),x=(e,t,n,r="maxLength",a="minLength")=>{const l=e?t:n;w[h]={type:e?r:a,message:l,ref:u,...A(e?r:a,l)}};if(a?!Array.isArray(y)||!y.length:o&&(!D&&(S||Fe(y))||Ie(y)&&!y||k&&!gt(l).isValid||C&&!bt(l).isValid)){const{value:e,message:t}=dt(o)?{value:!!o,message:o}:wt(o);if(e&&(w[h]={type:We,message:t,ref:b,...A(We,t)},!n))return E(t),w}if(!(S||Fe(c)&&Fe(f))){let e,t;const r=wt(f),a=wt(c);if(Fe(y)||isNaN(y)){const n=u.valueAsDate||new Date(y),l=e=>new Date((new Date).toDateString()+" "+e),o="time"==u.type,i="week"==u.type;Ze(r.value)&&y&&(e=o?l(y)>l(r.value):i?y>r.value:n>new Date(r.value)),Ze(a.value)&&y&&(t=o?l(y)<l(a.value):i?y<a.value:n<new Date(a.value))}else{const n=u.valueAsNumber||(y?+y:y);Fe(r.value)||(e=n>r.value),Fe(a.value)||(t=n<a.value)}if((e||t)&&(x(!!e,r.message,a.message,"max","min"),!n))return E(w[h].message),w}if((i||s)&&!S&&(Ze(y)||a&&Array.isArray(y))){const e=wt(i),t=wt(s),r=!Fe(e.value)&&y.length>+e.value,a=!Fe(t.value)&&y.length<+t.value;if((r||a)&&(x(r,e.message,t.message),!n))return E(w[h].message),w}if(d&&!S&&Ze(y)){const{value:e,message:t}=wt(d);if(ht(e)&&!y.match(e)&&(w[h]={type:$e,message:t,ref:u,...A($e,t)},!n))return E(t),w}if(p)if(ct(p)){const e=Et(await p(y,t),b);if(e&&(w[h]={...e,...A("validate",e.message)},!n))return E(e.message),w}else if(Le(p)){let e={};for(const r in p){if(!Ge(e)&&!n)break;const a=Et(await p[r](y,t),b,r);a&&(e={...a,...A(r,a.message)},E(a.message),n&&(w[h]=e))}if(!Ge(e)&&(w[h]={ref:b,...e},!n))return w}return E(!0),w};function kt(e,t){const n=Array.isArray(t)?t:tt(t)?[t]:nt(t),r=1===n.length?e:function(e,t){const n=t.slice(0,-1).length;let r=0;for(;r<n;)e=Me(e)?r++:e[t[r++]];return e}(e,n),a=n.length-1,u=n[a];return r&&delete r[u],0!==a&&(Le(r)&&Ge(r)||Array.isArray(r)&&function(e){for(const t in e)if(e.hasOwnProperty(t)&&!Me(e[t]))return!1;return!0}(r))&&kt(e,n.slice(0,-1)),e}function Dt(){let e=[];return{get observers(){return e},next:t=>{for(const n of e)n.next&&n.next(t)},subscribe:t=>(e.push(t),{unsubscribe:()=>{e=e.filter((e=>e!==t))}}),unsubscribe:()=>{e=[]}}}var St=e=>Fe(e)||!Ne(e);function At(e,t){if(St(e)||St(t))return e===t;if(_e(e)&&_e(t))return e.getTime()===t.getTime();const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(const a of n){const n=e[a];if(!r.includes(a))return!1;if("ref"!==a){const e=t[a];if(_e(n)&&_e(e)||Le(n)&&Le(e)||Array.isArray(n)&&Array.isArray(e)?!At(n,e):n!==e)return!1}}return!0}var xt=e=>"select-multiple"===e.type,_t=e=>pt(e)||xe(e),Ft=e=>ft(e)&&e.isConnected,Nt=e=>{for(const t in e)if(ct(e[t]))return!0;return!1};function Lt(e,t={}){const n=Array.isArray(e);if(Le(e)||n)for(const n in e)Array.isArray(e[n])||Le(e[n])&&!Nt(e[n])?(t[n]=Array.isArray(e[n])?[]:{},Lt(e[n],t[n])):Fe(e[n])||(t[n]=!0);return t}function Pt(e,t,n){const r=Array.isArray(e);if(Le(e)||r)for(const r in e)Array.isArray(e[r])||Le(e[r])&&!Nt(e[r])?Me(t)||St(n[r])?n[r]=Array.isArray(e[r])?Lt(e[r],[]):{...Lt(e[r])}:Pt(e[r],Fe(t)?{}:t[r],n[r]):n[r]=!At(e[r],t[r]);return n}var Tt=(e,t)=>Pt(e,t,Lt(t)),Bt=(e,{valueAsNumber:t,valueAsDate:n,setValueAs:r})=>Me(e)?e:t?""===e?NaN:e?+e:e:n&&Ze(e)?new Date(e):r?r(e):e;function Ot(e){const t=e.ref;if(!(e.refs?e.refs.every((e=>e.disabled)):t.disabled))return st(t)?t.files:pt(t)?bt(e.refs).value:xt(t)?[...t.selectedOptions].map((({value:e})=>e)):xe(t)?gt(e.refs).value:Bt(Me(t.value)?e.ref.value:t.value,e)}var Rt=(e,t,n,r)=>{const a={};for(const n of e){const e=ze(t,n);e&&rt(a,n,e._f)}return{criteriaMode:n,names:[...e],fields:a,shouldUseNativeValidation:r}},jt=e=>Me(e)?e:ht(e)?e.source:Le(e)?ht(e.value)?e.value.source:e.value:e,Mt=e=>e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate);function zt(e,t,n){const r=ze(e,n);if(r||tt(n))return{error:r,name:n};const a=n.split(".");for(;a.length;){const r=a.join("."),u=ze(t,r),l=ze(e,r);if(u&&!Array.isArray(u)&&n!==r)return{name:n};if(l&&l.type)return{name:r,error:l};a.pop()}return{name:n}}var It=(e,t,n,r,a)=>!a.isOnAll&&(!n&&a.isOnTouch?!(t||e):(n?r.isOnBlur:a.isOnBlur)?!e:!(n?r.isOnChange:a.isOnChange)||e),Ut=(e,t)=>!je(ze(e,t)).length&&kt(e,t);const Vt={mode:Ve.onSubmit,reValidateMode:Ve.onChange,shouldFocusError:!0};function $t(e={},t){let n,r={...Vt,...e},a={submitCount:0,isDirty:!1,isLoading:ct(r.defaultValues),isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},errors:{},disabled:!1},u={},l=(Le(r.defaultValues)||Le(r.values))&&Re(r.defaultValues||r.values)||{},o=r.shouldUnregister?{}:Re(l),i={action:!1,mount:!1,watch:!1},s={mount:new Set,unMount:new Set,array:new Set,watch:new Set},c=0;const f={isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},d={values:Dt(),array:Dt(),state:Dt()},p=e.resetOptions&&e.resetOptions.keepDirtyValues,h=ut(r.mode),m=ut(r.reValidateMode),v=r.criteriaMode===Ve.all,g=async e=>{if(f.isValid||e){const e=r.resolver?Ge((await w()).errors):await C(u,!0);e!==a.isValid&&d.state.next({isValid:e})}},y=e=>f.isValidating&&d.state.next({isValidating:e}),b=(e,t,n,r)=>{const a=ze(u,e);if(a){const u=ze(o,e,Me(n)?ze(l,e):n);Me(u)||r&&r.defaultChecked||t?rt(o,e,t?u:Ot(a._f)):S(e,u),i.mount&&g()}},E=(e,t,n,r,u)=>{let o=!1,i=!1;const s={name:e};if(!n||r){f.isDirty&&(i=a.isDirty,a.isDirty=s.isDirty=k(),o=i!==s.isDirty);const n=At(ze(l,e),t);i=ze(a.dirtyFields,e),n?kt(a.dirtyFields,e):rt(a.dirtyFields,e,!0),s.dirtyFields=a.dirtyFields,o=o||f.dirtyFields&&i!==!n}if(n){const t=ze(a.touchedFields,e);t||(rt(a.touchedFields,e,n),s.touchedFields=a.touchedFields,o=o||f.touchedFields&&t!==n)}return o&&u&&d.state.next(s),o?s:{}},w=async e=>r.resolver(o,r.context,Rt(e||s.mount,u,r.criteriaMode,r.shouldUseNativeValidation)),C=async(e,t,n={valid:!0})=>{for(const u in e){const l=e[u];if(l){const{_f:e,...u}=l;if(e){const u=s.array.has(e.name),i=await Ct(l,o,v,r.shouldUseNativeValidation&&!t,u);if(i[e.name]&&(n.valid=!1,t))break;!t&&(ze(i,e.name)?u?it(a.errors,i,e.name):rt(a.errors,e.name,i[e.name]):kt(a.errors,e.name))}u&&await C(u,t,n)}}return n.valid},k=(e,t)=>(e&&t&&rt(o,e,t),!At(L(),l)),D=(e,t,n)=>et(e,s,{...i.mount?o:Me(t)?l:Ze(e)?{[e]:t}:t},n,t),S=(e,t,n={})=>{const r=ze(u,e);let a=t;if(r){const n=r._f;n&&(!n.disabled&&rt(o,e,Bt(t,n)),a=ft(n.ref)&&Fe(t)?"":t,xt(n.ref)?[...n.ref.options].forEach((e=>e.selected=a.includes(e.value))):n.refs?xe(n.ref)?n.refs.length>1?n.refs.forEach((e=>(!e.defaultChecked||!e.disabled)&&(e.checked=Array.isArray(a)?!!a.find((t=>t===e.value)):a===e.value))):n.refs[0]&&(n.refs[0].checked=!!a):n.refs.forEach((e=>e.checked=e.value===a)):st(n.ref)?n.ref.value="":(n.ref.value=a,n.ref.type||d.values.next({name:e,values:{...o}})))}(n.shouldDirty||n.shouldTouch)&&E(e,a,n.shouldTouch,n.shouldDirty,!0),n.shouldValidate&&N(e)},A=(e,t,n)=>{for(const r in t){const a=t[r],l=`${e}.${r}`,o=ze(u,l);!s.array.has(e)&&St(a)&&(!o||o._f)||_e(a)?S(l,a,n):A(l,a,n)}},x=(e,n,r={})=>{const c=ze(u,e),p=s.array.has(e),h=Re(n);rt(o,e,h),p?(d.array.next({name:e,values:{...o}}),(f.isDirty||f.dirtyFields)&&r.shouldDirty&&d.state.next({name:e,dirtyFields:Tt(l,o),isDirty:k(e,h)})):!c||c._f||Fe(h)?S(e,h,r):A(e,h,r),lt(e,s)&&d.state.next({...a}),d.values.next({name:e,values:{...o}}),!i.mount&&t()},_=async t=>{const l=t.target;let i=l.name,p=!0;const b=ze(u,i),k=e=>{p=Number.isNaN(e)||e===ze(o,i,e)};if(b){let D,S;const A=l.type?Ot(b._f):Pe(t),x=t.type===Ue.BLUR||t.type===Ue.FOCUS_OUT,_=!Mt(b._f)&&!r.resolver&&!ze(a.errors,i)&&!b._f.deps||It(x,ze(a.touchedFields,i),a.isSubmitted,m,h),F=lt(i,s,x);rt(o,i,A),x?(b._f.onBlur&&b._f.onBlur(t),n&&n(0)):b._f.onChange&&b._f.onChange(t);const L=E(i,A,x,!1),P=!Ge(L)||F;if(!x&&d.values.next({name:i,type:t.type,values:{...o}}),_)return f.isValid&&g(),P&&d.state.next({name:i,...F?{}:L});if(!x&&F&&d.state.next({...a}),y(!0),r.resolver){const{errors:e}=await w([i]);if(k(A),p){const t=zt(a.errors,u,i),n=zt(e,u,t.name||i);D=n.error,i=n.name,S=Ge(e)}}else D=(await Ct(b,o,v,r.shouldUseNativeValidation))[i],k(A),p&&(D?S=!1:f.isValid&&(S=await C(u,!0)));p&&(b._f.deps&&N(b._f.deps),((t,r,u,l)=>{const o=ze(a.errors,t),i=f.isValid&&Ie(r)&&a.isValid!==r;var s;if(e.delayError&&u?(s=()=>((e,t)=>{rt(a.errors,e,t),d.state.next({errors:a.errors})})(t,u),n=e=>{clearTimeout(c),c=setTimeout(s,e)},n(e.delayError)):(clearTimeout(c),n=null,u?rt(a.errors,t,u):kt(a.errors,t)),(u?!At(o,u):o)||!Ge(l)||i){const e={...l,...i&&Ie(r)?{isValid:r}:{},errors:a.errors,name:t};a={...a,...e},d.state.next(e)}y(!1)})(i,S,D,L))}},F=(e,t)=>{if(ze(a.errors,t)&&e.focus)return e.focus(),1},N=async(e,t={})=>{let n,l;const o=Ye(e);if(y(!0),r.resolver){const t=await(async e=>{const{errors:t}=await w(e);if(e)for(const n of e){const e=ze(t,n);e?rt(a.errors,n,e):kt(a.errors,n)}else a.errors=t;return t})(Me(e)?e:o);n=Ge(t),l=e?!o.some((e=>ze(t,e))):n}else e?(l=(await Promise.all(o.map((async e=>{const t=ze(u,e);return await C(t&&t._f?{[e]:t}:t)})))).every(Boolean),(l||a.isValid)&&g()):l=n=await C(u);return d.state.next({...!Ze(e)||f.isValid&&n!==a.isValid?{}:{name:e},...r.resolver||!e?{isValid:n}:{},errors:a.errors,isValidating:!1}),t.shouldFocus&&!l&&ot(u,F,e?o:s.mount),l},L=e=>{const t={...l,...i.mount?o:{}};return Me(e)?t:Ze(e)?ze(t,e):e.map((e=>ze(t,e)))},P=(e,t)=>({invalid:!!ze((t||a).errors,e),isDirty:!!ze((t||a).dirtyFields,e),isTouched:!!ze((t||a).touchedFields,e),error:ze((t||a).errors,e)}),T=(e,t,n)=>{const r=(ze(u,e,{_f:{}})._f||{}).ref;rt(a.errors,e,{...t,ref:r}),d.state.next({name:e,errors:a.errors,isValid:!1}),n&&n.shouldFocus&&r&&r.focus&&r.focus()},B=(e,t={})=>{for(const n of e?Ye(e):s.mount)s.mount.delete(n),s.array.delete(n),t.keepValue||(kt(u,n),kt(o,n)),!t.keepError&&kt(a.errors,n),!t.keepDirty&&kt(a.dirtyFields,n),!t.keepTouched&&kt(a.touchedFields,n),!r.shouldUnregister&&!t.keepDefaultValue&&kt(l,n);d.values.next({values:{...o}}),d.state.next({...a,...t.keepDirty?{isDirty:k()}:{}}),!t.keepIsValid&&g()},O=({disabled:e,name:t,field:n,fields:r,value:a})=>{if(Ie(e)){const u=e?void 0:Me(a)?Ot(n?n._f:ze(r,t)._f):a;rt(o,t,u),E(t,u,!1,!1,!0)}},R=(e,t={})=>{let n=ze(u,e);const a=Ie(t.disabled);return rt(u,e,{...n||{},_f:{...n&&n._f?n._f:{ref:{name:e}},name:e,mount:!0,...t}}),s.mount.add(e),n?O({field:n,disabled:t.disabled,name:e}):b(e,!0,t.value),{...a?{disabled:t.disabled}:{},...r.progressive?{required:!!t.required,min:jt(t.min),max:jt(t.max),minLength:jt(t.minLength),maxLength:jt(t.maxLength),pattern:jt(t.pattern)}:{},name:e,onChange:_,onBlur:_,ref:a=>{if(a){R(e,t),n=ze(u,e);const r=Me(a.value)&&a.querySelectorAll&&a.querySelectorAll("input,select,textarea")[0]||a,o=_t(r),i=n._f.refs||[];if(o?i.find((e=>e===r)):r===n._f.ref)return;rt(u,e,{_f:{...n._f,...o?{refs:[...i.filter(Ft),r,...Array.isArray(ze(l,e))?[{}]:[]],ref:{type:r.type,name:e}}:{ref:r}}}),b(e,!1,void 0,r)}else n=ze(u,e,{}),n._f&&(n._f.mount=!1),(r.shouldUnregister||t.shouldUnregister)&&(!Te(s.array,e)||!i.action)&&s.unMount.add(e)}}},j=()=>r.shouldFocusError&&ot(u,F,s.mount),M=(e,t)=>async n=>{n&&(n.preventDefault&&n.preventDefault(),n.persist&&n.persist());let l=Re(o);if(d.state.next({isSubmitting:!0}),r.resolver){const{errors:e,values:t}=await w();a.errors=e,l=t}else await C(u);kt(a.errors,"root"),Ge(a.errors)?(d.state.next({errors:{}}),await e(l,n)):(t&&await t({...a.errors},n),j(),setTimeout(j)),d.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:Ge(a.errors),submitCount:a.submitCount+1,errors:a.errors})},z=(n,r={})=>{const c=n?Re(n):l,h=Re(c),m=n&&!Ge(n)?h:l;if(r.keepDefaultValues||(l=c),!r.keepValues){if(r.keepDirtyValues||p)for(const e of s.mount)ze(a.dirtyFields,e)?rt(m,e,ze(o,e)):x(e,ze(m,e));else{if(Oe&&Me(n))for(const e of s.mount){const t=ze(u,e);if(t&&t._f){const e=Array.isArray(t._f.refs)?t._f.refs[0]:t._f.ref;if(ft(e)){const t=e.closest("form");if(t){t.reset();break}}}}u={}}o=e.shouldUnregister?r.keepDefaultValues?Re(l):{}:Re(m),d.array.next({values:{...m}}),d.values.next({values:{...m}})}s={mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},!i.mount&&t(),i.mount=!f.isValid||!!r.keepIsValid,i.watch=!!e.shouldUnregister,d.state.next({submitCount:r.keepSubmitCount?a.submitCount:0,isDirty:r.keepDirty?a.isDirty:!(!r.keepDefaultValues||At(n,l)),isSubmitted:!!r.keepIsSubmitted&&a.isSubmitted,dirtyFields:r.keepDirtyValues?a.dirtyFields:r.keepDefaultValues&&n?Tt(l,n):{},touchedFields:r.keepTouched?a.touchedFields:{},errors:r.keepErrors?a.errors:{},isSubmitSuccessful:!!r.keepIsSubmitSuccessful&&a.isSubmitSuccessful,isSubmitting:!1})},I=(e,t)=>z(ct(e)?e(o):e,t);return{control:{register:R,unregister:B,getFieldState:P,handleSubmit:M,setError:T,_executeSchema:w,_getWatch:D,_getDirty:k,_updateValid:g,_removeUnmounted:()=>{for(const e of s.unMount){const t=ze(u,e);t&&(t._f.refs?t._f.refs.every((e=>!Ft(e))):!Ft(t._f.ref))&&B(e)}s.unMount=new Set},_updateFieldArray:(e,t=[],n,r,s=!0,c=!0)=>{if(r&&n){if(i.action=!0,c&&Array.isArray(ze(u,e))){const t=n(ze(u,e),r.argA,r.argB);s&&rt(u,e,t)}if(c&&Array.isArray(ze(a.errors,e))){const t=n(ze(a.errors,e),r.argA,r.argB);s&&rt(a.errors,e,t),Ut(a.errors,e)}if(f.touchedFields&&c&&Array.isArray(ze(a.touchedFields,e))){const t=n(ze(a.touchedFields,e),r.argA,r.argB);s&&rt(a.touchedFields,e,t)}f.dirtyFields&&(a.dirtyFields=Tt(l,o)),d.state.next({name:e,isDirty:k(e,t),dirtyFields:a.dirtyFields,errors:a.errors,isValid:a.isValid})}else rt(o,e,t)},_updateDisabledField:O,_getFieldArray:t=>je(ze(i.mount?o:l,t,e.shouldUnregister?ze(l,t,[]):[])),_reset:z,_resetDefaultValues:()=>ct(r.defaultValues)&&r.defaultValues().then((e=>{I(e,r.resetOptions),d.state.next({isLoading:!1})})),_updateFormState:e=>{a={...a,...e}},_disableForm:e=>{Ie(e)&&(d.state.next({disabled:e}),ot(u,(t=>{t.disabled=e}),0,!1))},_subjects:d,_proxyFormState:f,get _fields(){return u},get _formValues(){return o},get _state(){return i},set _state(e){i=e},get _defaultValues(){return l},get _names(){return s},set _names(e){s=e},get _formState(){return a},set _formState(e){a=e},get _options(){return r},set _options(e){r={...r,...e}}},trigger:N,register:R,handleSubmit:M,watch:(e,t)=>ct(e)?d.values.subscribe({next:n=>e(D(void 0,t),n)}):D(e,t,!0),setValue:x,getValues:L,reset:I,resetField:(e,t={})=>{ze(u,e)&&(Me(t.defaultValue)?x(e,ze(l,e)):(x(e,t.defaultValue),rt(l,e,t.defaultValue)),t.keepTouched||kt(a.touchedFields,e),t.keepDirty||(kt(a.dirtyFields,e),a.isDirty=t.defaultValue?k(e,ze(l,e)):k()),t.keepError||(kt(a.errors,e),f.isValid&&g()),d.state.next({...a}))},clearErrors:e=>{e&&Ye(e).forEach((e=>kt(a.errors,e))),d.state.next({errors:e?a.errors:{}})},unregister:B,setError:T,setFocus:(e,t={})=>{const n=ze(u,e),r=n&&n._f;if(r){const e=r.refs?r.refs[0]:r.ref;e.focus&&(e.focus(),t.shouldSelect&&e.select())}},getFieldState:P}}function Wt(t={}){const n=e.useRef(),r=e.useRef(),[a,u]=e.useState({isDirty:!1,isValidating:!1,isLoading:ct(t.defaultValues),isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},errors:{},disabled:!1,defaultValues:ct(t.defaultValues)?void 0:t.defaultValues});n.current||(n.current={...$t(t,(()=>u((e=>({...e}))))),formState:a});const l=n.current.control;return l._options=t,Je({subject:l._subjects.state,next:e=>{Ke(e,l._proxyFormState,l._updateFormState,!0)&&u({...l._formState})}}),e.useEffect((()=>l._disableForm(t.disabled)),[l,t.disabled]),e.useEffect((()=>{if(l._proxyFormState.isDirty){const e=l._getDirty();e!==a.isDirty&&l._subjects.state.next({isDirty:e})}}),[l,a.isDirty]),e.useEffect((()=>{t.values&&!At(t.values,r.current)?(l._reset(t.values,l._options.resetOptions),r.current=t.values):l._resetDefaultValues()}),[t.values,l]),e.useEffect((()=>{l._state.mount||(l._updateValid(),l._state.mount=!0),l._state.watch&&(l._state.watch=!1,l._subjects.state.next({...l._formState})),l._removeUnmounted()})),n.current.formState=qe(a,l),n.current}function Ht(){return Ht=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ht.apply(this,arguments)}function Qt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function qt(t){var n=t.handleClose,a=(0,e.useContext)(r).login,u=Wt(),l=u.register,o=u.handleSubmit,i=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,u,l,o=[],i=!0,s=!1;try{if(u=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;i=!1}else for(;!(i=(r=u.call(n)).done)&&(o.push(r.value),o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{if(!i&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Qt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,e.useState)(null),2),s=i[0],c=i[1];return e.createElement("form",{onSubmit:o((function(t){fetch("/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(t){t.ok?(a(),setTimeout((function(){n()}),1e3),t.json().then((function(t){var n=t.message;c(e.createElement("div",{style:{color:"white",margin:"5px 0 5px 0",backgroundColor:"green",lineHeight:"20px",textAlign:"center"}},n))}))):t.json().then((function(t){var n=t.error||"Ошибка при отправке данных";c(e.createElement("div",{style:{color:"white",margin:"5px 0 5px 0",backgroundColor:"red",lineHeight:"20px",textAlign:"center"}},n))}))})).catch((function(e){c("Ошибка при отправке данных! ".concat(e))}))})),className:"regForm"},e.createElement("input",Ht({type:"text",autoComplete:"off"},l("name",{required:!0,maxLength:20}),{placeholder:"Юзернейм"})),e.createElement("input",Ht({type:"password",autoComplete:"off"},l("password",{required:"required"}),{placeholder:"Пароль"})),e.createElement("input",{type:"submit",className:"button",value:"Войти"}),s)}function Gt(){return Gt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Gt.apply(this,arguments)}function Kt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Yt(){var t=Wt({defaultValues:{password:"",email:"",name:""}}),n=t.register,r=t.handleSubmit,a=t.control,u=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,u,l,o=[],i=!0,s=!1;try{if(u=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;i=!1}else for(;!(i=(r=u.call(n)).done)&&(o.push(r.value),o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{if(!i&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,e.useState)(null),2),l=u[0],o=u[1],i={color:"green",fontWeight:"bold"},s={color:"red",fontWeight:"normal"},c=function(t){const n=Qe(),{control:r=n.control,name:a,defaultValue:u,disabled:l,exact:o}=t||{},i=e.useRef(a);i.current=a,Je({disabled:l,subject:r._subjects.values,next:e=>{Xe(i.current,e.name,o)&&c(Re(et(i.current,r._names,e.values||r._formValues,!1,u)))}});const[s,c]=e.useState(r._getWatch(a,u));return e.useEffect((()=>r._removeUnmounted())),s}({control:a,name:"password"});return e.createElement("form",{onSubmit:r((function(t){fetch("/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(t){t.ok?t.json().then((function(e){var t=e.message||"Ошибка при отправке данных";o(t)})):t.json().then((function(t){var n=t.error||"Ошибка при отправке данных";o(e.createElement("div",{style:{color:"white",margin:"5px 0 5px 0",backgroundColor:"red",lineHeight:"20px",textAlign:"center"}},n))}))})).catch((function(e){o("'Ошибка при отправке данных!', ".concat(e))}))})),className:"regForm"},"Юзер успешно зарегистрирован"===l?e.createElement("div",{style:{color:"black",padding:"10px",margin:"0 0 10px 0",backgroundColor:"rgba(59, 219, 91, 0.6)",lineHeight:"20px",textAlign:"center"}},e.createElement("p",null,l)):e.createElement(e.Fragment,null,e.createElement("input",Gt({type:"text",autoComplete:"off"},n("name",{required:!0,maxLength:20}),{placeholder:"Юзернейм"})),e.createElement("input",Gt({type:"email",autoComplete:"off"},n("email",{pattern:/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i}),{placeholder:"Емейл"})),e.createElement("input",Gt({type:"password",autoComplete:"off"},n("password",{pattern:/^(?=.*[0-9])(?=.*[a-zA-Zа-яА-ЯёЁ])(?=.*[*.!@$%^&(){}[\]:;<>,.?/~_ +-=|\\]).{8,32}$/}),{placeholder:"Пароль"})),e.createElement("label",{htmlFor:"password",style:{marginLeft:"20px"}},e.createElement("ul",null,e.createElement("li",{style:/^.{8,}$/.test(c)?i:s},"Длина пароля не менее 8 символов"),e.createElement("li",{style:/\d/.test(c)?i:s},"Пароль должен содержать 1 цифру"),e.createElement("li",{style:/[\W_]/.test(c)?i:s},"Пароль должен содержать 1 знак"),e.createElement("li",{style:/(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])/.test(c)?i:s},"Пароль должен содержать 1 заглавную букву"),e.createElement("li",{style:/(?:[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/.test(c)?i:s},"Пароль должен содержать 1 букву в нижнем регистре"))),e.createElement("input",{type:"submit",className:"button"}),e.createElement("p",null,l)))}function Xt(e,t,...n){if(e in t){let r=t[e];return"function"==typeof r?r(...n):r}let r=new Error(`Tried to handle "${e}" but there is no handler defined. Only defined handlers are: ${Object.keys(t).map((e=>`"${e}"`)).join(", ")}.`);throw Error.captureStackTrace&&Error.captureStackTrace(r,Xt),r}function Jt(...e){return Array.from(new Set(e.flatMap((e=>"string"==typeof e?e.split(" "):[])))).filter(Boolean).join(" ")}var Zt,en=((Zt=en||{})[Zt.None=0]="None",Zt[Zt.RenderStrategy=1]="RenderStrategy",Zt[Zt.Static=2]="Static",Zt),tn=(e=>(e[e.Unmount=0]="Unmount",e[e.Hidden=1]="Hidden",e))(tn||{});function nn({ourProps:e,theirProps:t,slot:n,defaultTag:r,features:a,visible:u=!0,name:l}){let o=an(t,e);if(u)return rn(o,n,r,l);let i=null!=a?a:0;if(2&i){let{static:e=!1,...t}=o;if(e)return rn(t,n,r,l)}if(1&i){let{unmount:e=!0,...t}=o;return Xt(e?0:1,{0:()=>null,1:()=>rn({...t,hidden:!0,style:{display:"none"}},n,r,l)})}return rn(o,n,r,l)}function rn(t,n={},r,a){let{as:u=r,children:l,refName:o="ref",...i}=on(t,["unmount","static"]),s=void 0!==t.ref?{[o]:t.ref}:{},c="function"==typeof l?l(n):l;"className"in i&&i.className&&"function"==typeof i.className&&(i.className=i.className(n));let f={};if(n){let e=!1,t=[];for(let[r,a]of Object.entries(n))"boolean"==typeof a&&(e=!0),!0===a&&t.push(r);e&&(f["data-headlessui-state"]=t.join(" "))}if(u===e.Fragment&&Object.keys(ln(i)).length>0){if(!(0,e.isValidElement)(c)||Array.isArray(c)&&c.length>1)throw new Error(['Passing props on "Fragment"!',"",`The current component <${a} /> is rendering a "Fragment".`,"However we need to passthrough the following props:",Object.keys(i).map((e=>`  - ${e}`)).join("\n"),"","You can apply a few solutions:",['Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".',"Render a single element as the child so that we can forward the props onto that element."].map((e=>`  - ${e}`)).join("\n")].join("\n"));let t=c.props,n="function"==typeof(null==t?void 0:t.className)?(...e)=>Jt(null==t?void 0:t.className(...e),i.className):Jt(null==t?void 0:t.className,i.className),r=n?{className:n}:{};return(0,e.cloneElement)(c,Object.assign({},an(c.props,ln(on(i,["ref"]))),f,s,function(...e){return{ref:e.every((e=>null==e))?void 0:t=>{for(let n of e)null!=n&&("function"==typeof n?n(t):n.current=t)}}}(c.ref,s.ref),r))}return(0,e.createElement)(u,Object.assign({},on(i,["ref"]),u!==e.Fragment&&s,u!==e.Fragment&&f),c)}function an(...e){if(0===e.length)return{};if(1===e.length)return e[0];let t={},n={};for(let r of e)for(let e in r)e.startsWith("on")&&"function"==typeof r[e]?(null!=n[e]||(n[e]=[]),n[e].push(r[e])):t[e]=r[e];if(t.disabled||t["aria-disabled"])return Object.assign(t,Object.fromEntries(Object.keys(n).map((e=>[e,void 0]))));for(let e in n)Object.assign(t,{[e](t,...r){let a=n[e];for(let e of a){if((t instanceof Event||(null==t?void 0:t.nativeEvent)instanceof Event)&&t.defaultPrevented)return;e(t,...r)}}});return t}function un(t){var n;return Object.assign((0,e.forwardRef)(t),{displayName:null!=(n=t.displayName)?n:t.name})}function ln(e){let t=Object.assign({},e);for(let e in t)void 0===t[e]&&delete t[e];return t}function on(e,t=[]){let n=Object.assign({},e);for(let e of t)e in n&&delete n[e];return n}var sn=Object.defineProperty,cn=(e,t,n)=>(((e,t,n)=>{t in e?sn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);let fn=new class{constructor(){cn(this,"current",this.detect()),cn(this,"handoffState","pending"),cn(this,"currentId",0)}set(e){this.current!==e&&(this.handoffState="pending",this.currentId=0,this.current=e)}reset(){this.set(this.detect())}nextId(){return++this.currentId}get isServer(){return"server"===this.current}get isClient(){return"client"===this.current}detect(){return"undefined"==typeof window||"undefined"==typeof document?"server":"client"}handoff(){"pending"===this.handoffState&&(this.handoffState="complete")}get isHandoffComplete(){return"complete"===this.handoffState}},dn=(t,n)=>{fn.isServer?(0,e.useEffect)(t,n):(0,e.useLayoutEffect)(t,n)};function pn(t){let n=(0,e.useRef)(t);return dn((()=>{n.current=t}),[t]),n}let hn=function(t){let n=pn(t);return e.useCallback(((...e)=>n.current(...e)),[n])},mn=Symbol();function vn(...t){let n=(0,e.useRef)(t);(0,e.useEffect)((()=>{n.current=t}),[t]);let r=hn((e=>{for(let t of n.current)null!=t&&("function"==typeof t?t(e):t.current=e)}));return t.every((e=>null==e||(null==e?void 0:e[mn])))?void 0:r}var gn,yn=(e=>(e.Space=" ",e.Enter="Enter",e.Escape="Escape",e.Backspace="Backspace",e.Delete="Delete",e.ArrowLeft="ArrowLeft",e.ArrowUp="ArrowUp",e.ArrowRight="ArrowRight",e.ArrowDown="ArrowDown",e.Home="Home",e.End="End",e.PageUp="PageUp",e.PageDown="PageDown",e.Tab="Tab",e))(yn||{});function bn(){let n=function(){let e="undefined"==typeof document;return t.useSyncExternalStore((()=>()=>{}),(()=>!1),(()=>!e))}(),[r,a]=e.useState(fn.isHandoffComplete);return r&&!1===fn.isHandoffComplete&&a(!1),e.useEffect((()=>{!0!==r&&a(!0)}),[r]),e.useEffect((()=>fn.handoff()),[]),!n&&r}let En=null!=(gn=e.useId)?gn:function(){let t=bn(),[n,r]=e.useState(t?()=>fn.nextId():null);return dn((()=>{null===n&&r(fn.nextId())}),[n]),null!=n?""+n:void 0};var wn=(e=>(e[e.None=1]="None",e[e.Focusable=2]="Focusable",e[e.Hidden=4]="Hidden",e))(wn||{});let Cn=un((function(e,t){let{features:n=1,...r}=e;return nn({ourProps:{ref:t,"aria-hidden":2==(2&n)||void 0,style:{position:"fixed",top:1,left:1,width:1,height:0,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",borderWidth:"0",...4==(4&n)&&2!=(2&n)&&{display:"none"}}},theirProps:r,slot:{},defaultTag:"div",name:"Hidden"})}));function kn(e){return fn.isServer?null:e instanceof Node?e.ownerDocument:null!=e&&e.hasOwnProperty("current")&&e.current instanceof Node?e.current.ownerDocument:document}let Dn=["[contentEditable=true]","[tabindex]","a[href]","area[href]","button:not([disabled])","iframe","input:not([disabled])","select:not([disabled])","textarea:not([disabled])"].map((e=>`${e}:not([tabindex='-1'])`)).join(",");var Sn,An,xn=(e=>(e[e.First=1]="First",e[e.Previous=2]="Previous",e[e.Next=4]="Next",e[e.Last=8]="Last",e[e.WrapAround=16]="WrapAround",e[e.NoScroll=32]="NoScroll",e))(xn||{}),_n=((An=_n||{})[An.Error=0]="Error",An[An.Overflow=1]="Overflow",An[An.Success=2]="Success",An[An.Underflow=3]="Underflow",An),Fn=((Sn=Fn||{})[Sn.Previous=-1]="Previous",Sn[Sn.Next=1]="Next",Sn);var Nn=(e=>(e[e.Strict=0]="Strict",e[e.Loose=1]="Loose",e))(Nn||{});var Ln=(e=>(e[e.Keyboard=0]="Keyboard",e[e.Mouse=1]="Mouse",e))(Ln||{});function Pn(e){null==e||e.focus({preventScroll:!0})}"undefined"!=typeof window&&"undefined"!=typeof document&&(document.addEventListener("keydown",(e=>{e.metaKey||e.altKey||e.ctrlKey||(document.documentElement.dataset.headlessuiFocusVisible="")}),!0),document.addEventListener("click",(e=>{1===e.detail?delete document.documentElement.dataset.headlessuiFocusVisible:0===e.detail&&(document.documentElement.dataset.headlessuiFocusVisible="")}),!0));let Tn=["textarea","input"].join(",");function Bn(e,t,{sorted:n=!0,relativeTo:r=null,skipElements:a=[]}={}){let u=Array.isArray(e)?e.length>0?e[0].ownerDocument:document:e.ownerDocument,l=Array.isArray(e)?n?function(e,t=(e=>e)){return e.slice().sort(((e,n)=>{let r=t(e),a=t(n);if(null===r||null===a)return 0;let u=r.compareDocumentPosition(a);return u&Node.DOCUMENT_POSITION_FOLLOWING?-1:u&Node.DOCUMENT_POSITION_PRECEDING?1:0}))}(e):e:function(e=document.body){return null==e?[]:Array.from(e.querySelectorAll(Dn)).sort(((e,t)=>Math.sign((e.tabIndex||Number.MAX_SAFE_INTEGER)-(t.tabIndex||Number.MAX_SAFE_INTEGER))))}(e);a.length>0&&l.length>1&&(l=l.filter((e=>!a.includes(e)))),r=null!=r?r:u.activeElement;let o,i=(()=>{if(5&t)return 1;if(10&t)return-1;throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last")})(),s=(()=>{if(1&t)return 0;if(2&t)return Math.max(0,l.indexOf(r))-1;if(4&t)return Math.max(0,l.indexOf(r))+1;if(8&t)return l.length-1;throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last")})(),c=32&t?{preventScroll:!0}:{},f=0,d=l.length;do{if(f>=d||f+d<=0)return 0;let e=s+f;if(16&t)e=(e+d)%d;else{if(e<0)return 3;if(e>=d)return 1}o=l[e],null==o||o.focus(c),f+=i}while(o!==u.activeElement);return 6&t&&function(e){var t,n;return null!=(n=null==(t=null==e?void 0:e.matches)?void 0:t.call(e,Tn))&&n}(o)&&o.select(),2}function On(t,n,r){let a=pn(n);(0,e.useEffect)((()=>{function e(e){a.current(e)}return window.addEventListener(t,e,r),()=>window.removeEventListener(t,e,r)}),[t,r])}var Rn=(e=>(e[e.Forwards=0]="Forwards",e[e.Backwards=1]="Backwards",e))(Rn||{});function jn(){let t=(0,e.useRef)(!1);return dn((()=>(t.current=!0,()=>{t.current=!1})),[]),t}function Mn(...t){return(0,e.useMemo)((()=>kn(...t)),[...t])}function zn(t,n,r,a){let u=pn(r);(0,e.useEffect)((()=>{function e(e){u.current(e)}return(t=null!=t?t:window).addEventListener(n,e,a),()=>t.removeEventListener(n,e,a)}),[t,n,a])}function In(e){"function"==typeof queueMicrotask?queueMicrotask(e):Promise.resolve().then(e).catch((e=>setTimeout((()=>{throw e}))))}function Un(t,n){let r=(0,e.useRef)([]),a=hn(t);(0,e.useEffect)((()=>{let e=[...r.current];for(let[t,u]of n.entries())if(r.current[t]!==u){let t=a(n,e);return r.current=n,t}}),[a,...n])}function Vn(){let e=[],t={addEventListener:(e,n,r,a)=>(e.addEventListener(n,r,a),t.add((()=>e.removeEventListener(n,r,a)))),requestAnimationFrame(...e){let n=requestAnimationFrame(...e);return t.add((()=>cancelAnimationFrame(n)))},nextFrame:(...e)=>t.requestAnimationFrame((()=>t.requestAnimationFrame(...e))),setTimeout(...e){let n=setTimeout(...e);return t.add((()=>clearTimeout(n)))},microTask(...e){let n={current:!0};return In((()=>{n.current&&e[0]()})),t.add((()=>{n.current=!1}))},style(e,t,n){let r=e.style.getPropertyValue(t);return Object.assign(e.style,{[t]:n}),this.add((()=>{Object.assign(e.style,{[t]:r})}))},group(e){let t=Vn();return e(t),this.add((()=>t.dispose()))},add:t=>(e.push(t),()=>{let n=e.indexOf(t);if(n>=0)for(let t of e.splice(n,1))t()}),dispose(){for(let t of e.splice(0))t()}};return t}function $n(t){let n=hn(t),r=(0,e.useRef)(!1);(0,e.useEffect)((()=>(r.current=!1,()=>{r.current=!0,In((()=>{r.current&&n()}))})),[n])}function Wn(e){if(!e)return new Set;if("function"==typeof e)return new Set(e());let t=new Set;for(let n of e.current)n.current instanceof HTMLElement&&t.add(n.current);return t}var Hn=(e=>(e[e.None=1]="None",e[e.InitialFocus=2]="InitialFocus",e[e.TabLock=4]="TabLock",e[e.FocusLock=8]="FocusLock",e[e.RestoreFocus=16]="RestoreFocus",e[e.All=30]="All",e))(Hn||{});let Qn=un((function(t,n){let r=(0,e.useRef)(null),a=vn(r,n),{initialFocus:u,containers:l,features:o=30,...i}=t;bn()||(o=1);let s=Mn(r);!function({ownerDocument:t},n){let r=function(t=!0){let n=(0,e.useRef)(Gn.slice());return Un((([e],[t])=>{!0===t&&!1===e&&In((()=>{n.current.splice(0)})),!1===t&&!0===e&&(n.current=Gn.slice())}),[t,Gn,n]),hn((()=>{var e;return null!=(e=n.current.find((e=>null!=e&&e.isConnected)))?e:null}))}(n);Un((()=>{n||(null==t?void 0:t.activeElement)===(null==t?void 0:t.body)&&Pn(r())}),[n]),$n((()=>{n&&Pn(r())}))}({ownerDocument:s},Boolean(16&o));let c=function({ownerDocument:t,container:n,initialFocus:r},a){let u=(0,e.useRef)(null),l=jn();return Un((()=>{if(!a)return;let e=n.current;e&&In((()=>{if(!l.current)return;let n=null==t?void 0:t.activeElement;if(null!=r&&r.current){if((null==r?void 0:r.current)===n)return void(u.current=n)}else if(e.contains(n))return void(u.current=n);null!=r&&r.current?Pn(r.current):Bn(e,xn.First)===_n.Error&&console.warn("There are no focusable elements inside the <FocusTrap />"),u.current=null==t?void 0:t.activeElement}))}),[a]),u}({ownerDocument:s,container:r,initialFocus:u},Boolean(2&o));!function({ownerDocument:e,container:t,containers:n,previousActiveElement:r},a){let u=jn();zn(null==e?void 0:e.defaultView,"focus",(e=>{if(!a||!u.current)return;let l=Wn(n);t.current instanceof HTMLElement&&l.add(t.current);let o=r.current;if(!o)return;let i=e.target;i&&i instanceof HTMLElement?Kn(l,i)?(r.current=i,Pn(i)):(e.preventDefault(),e.stopPropagation(),Pn(o)):Pn(r.current)}),!0)}({ownerDocument:s,container:r,containers:l,previousActiveElement:c},Boolean(8&o));let f=function(){let t=(0,e.useRef)(0);return On("keydown",(e=>{"Tab"===e.key&&(t.current=e.shiftKey?1:0)}),!0),t}(),d=hn((e=>{let t=r.current;t&&Xt(f.current,{[Rn.Forwards]:()=>{Bn(t,xn.First,{skipElements:[e.relatedTarget]})},[Rn.Backwards]:()=>{Bn(t,xn.Last,{skipElements:[e.relatedTarget]})}})})),p=function(){let[t]=(0,e.useState)(Vn);return(0,e.useEffect)((()=>()=>t.dispose()),[t]),t}(),h=(0,e.useRef)(!1),m={ref:a,onKeyDown(e){"Tab"==e.key&&(h.current=!0,p.requestAnimationFrame((()=>{h.current=!1})))},onBlur(e){let t=Wn(l);r.current instanceof HTMLElement&&t.add(r.current);let n=e.relatedTarget;n instanceof HTMLElement&&"true"!==n.dataset.headlessuiFocusGuard&&(Kn(t,n)||(h.current?Bn(r.current,Xt(f.current,{[Rn.Forwards]:()=>xn.Next,[Rn.Backwards]:()=>xn.Previous})|xn.WrapAround,{relativeTo:e.target}):e.target instanceof HTMLElement&&Pn(e.target)))}};return e.createElement(e.Fragment,null,Boolean(4&o)&&e.createElement(Cn,{as:"button",type:"button","data-headlessui-focus-guard":!0,onFocus:d,features:wn.Focusable}),nn({ourProps:m,theirProps:i,defaultTag:"div",name:"FocusTrap"}),Boolean(4&o)&&e.createElement(Cn,{as:"button",type:"button","data-headlessui-focus-guard":!0,onFocus:d,features:wn.Focusable}))})),qn=Object.assign(Qn,{features:Hn}),Gn=[];function Kn(e,t){for(let n of e)if(n.contains(t))return!0;return!1}!function(e){function t(){"loading"!==document.readyState&&((()=>{function e(e){e.target instanceof HTMLElement&&e.target!==document.body&&Gn[0]!==e.target&&(Gn.unshift(e.target),Gn=Gn.filter((e=>null!=e&&e.isConnected)),Gn.splice(10))}window.addEventListener("click",e,{capture:!0}),window.addEventListener("mousedown",e,{capture:!0}),window.addEventListener("focus",e,{capture:!0}),document.body.addEventListener("click",e,{capture:!0}),document.body.addEventListener("mousedown",e,{capture:!0}),document.body.addEventListener("focus",e,{capture:!0})})(),document.removeEventListener("DOMContentLoaded",t))}"undefined"!=typeof window&&"undefined"!=typeof document&&(document.addEventListener("DOMContentLoaded",t),t())}();let Yn=(0,e.createContext)(!1);function Xn(){return(0,e.useContext)(Yn)}function Jn(t){return e.createElement(Yn.Provider,{value:t.force},t.children)}let Zn=e.Fragment,er=e.Fragment,tr=(0,e.createContext)(null),nr=(0,e.createContext)(null),rr=un((function(t,n){let r=t,a=(0,e.useRef)(null),u=vn(function(e,t=!0){return Object.assign(e,{[mn]:t})}((e=>{a.current=e})),n),l=Mn(a),o=function(t){let n=Xn(),r=(0,e.useContext)(tr),a=Mn(t),[u,l]=(0,e.useState)((()=>{if(!n&&null!==r||fn.isServer)return null;let e=null==a?void 0:a.getElementById("headlessui-portal-root");if(e)return e;if(null===a)return null;let t=a.createElement("div");return t.setAttribute("id","headlessui-portal-root"),a.body.appendChild(t)}));return(0,e.useEffect)((()=>{null!==u&&(null!=a&&a.body.contains(u)||null==a||a.body.appendChild(u))}),[u,a]),(0,e.useEffect)((()=>{n||null!==r&&l(r.current)}),[r,l,n]),u}(a),[i]=(0,e.useState)((()=>{var e;return fn.isServer?null:null!=(e=null==l?void 0:l.createElement("div"))?e:null})),s=(0,e.useContext)(nr),c=bn();return dn((()=>{!o||!i||o.contains(i)||(i.setAttribute("data-headlessui-portal",""),o.appendChild(i))}),[o,i]),dn((()=>{if(i&&s)return s.register(i)}),[s,i]),$n((()=>{var e;!o||!i||(i instanceof Node&&o.contains(i)&&o.removeChild(i),o.childNodes.length<=0&&(null==(e=o.parentElement)||e.removeChild(o)))})),c&&o&&i?(0,f.createPortal)(nn({ourProps:{ref:u},theirProps:r,defaultTag:Zn,name:"Portal"}),i):null})),ar=un((function(t,n){let{target:r,...a}=t,u={ref:vn(n)};return e.createElement(tr.Provider,{value:r},nn({ourProps:u,theirProps:a,defaultTag:er,name:"Popover.Group"}))})),ur=Object.assign(rr,{Group:ar}),lr=(0,e.createContext)(null);function or(){let t=(0,e.useContext)(lr);if(null===t){let e=new Error("You used a <Description /> component, but it is not inside a relevant parent.");throw Error.captureStackTrace&&Error.captureStackTrace(e,or),e}return t}let ir=un((function(e,t){let n=En(),{id:r=`headlessui-description-${n}`,...a}=e,u=or(),l=vn(t);return dn((()=>u.register(r)),[r,u.register]),nn({ourProps:{ref:l,...u.props,id:r},theirProps:a,slot:u.slot||{},defaultTag:"p",name:u.name||"Description"})})),sr=Object.assign(ir,{}),cr=(0,e.createContext)(null);cr.displayName="OpenClosedContext";var fr=(e=>(e[e.Open=1]="Open",e[e.Closed=2]="Closed",e[e.Closing=4]="Closing",e[e.Opening=8]="Opening",e))(fr||{});function dr(){return(0,e.useContext)(cr)}let pr=(0,e.createContext)((()=>{}));pr.displayName="StackContext";var hr=(e=>(e[e.Add=0]="Add",e[e.Remove=1]="Remove",e))(hr||{});function mr({children:t,onUpdate:n,type:r,element:a,enabled:u}){let l=(0,e.useContext)(pr),o=hn(((...e)=>{null==n||n(...e),l(...e)}));return dn((()=>{let e=void 0===u||!0===u;return e&&o(0,r,a),()=>{e&&o(1,r,a)}}),[o,r,a,u]),e.createElement(pr.Provider,{value:o},t)}function vr(t,n,r){let a=pn(n);(0,e.useEffect)((()=>{function e(e){a.current(e)}return document.addEventListener(t,e,r),()=>document.removeEventListener(t,e,r)}),[t,r])}function gr(t,n,r=!0){let a=(0,e.useRef)(!1);function u(e,r){if(!a.current||e.defaultPrevented)return;let u=r(e);if(null===u||!u.getRootNode().contains(u)||!u.isConnected)return;let l=function e(t){return"function"==typeof t?e(t()):Array.isArray(t)||t instanceof Set?t:[t]}(t);for(let t of l){if(null===t)continue;let n=t instanceof HTMLElement?t:t.current;if(null!=n&&n.contains(u)||e.composed&&e.composedPath().includes(n))return}return!function(e,t=0){var n;return e!==(null==(n=kn(e))?void 0:n.body)&&Xt(t,{0:()=>e.matches(Dn),1(){let t=e;for(;null!==t;){if(t.matches(Dn))return!0;t=t.parentElement}return!1}})}(u,Nn.Loose)&&-1!==u.tabIndex&&e.preventDefault(),n(e,u)}(0,e.useEffect)((()=>{requestAnimationFrame((()=>{a.current=r}))}),[r]);let l=(0,e.useRef)(null);vr("pointerdown",(e=>{var t,n;a.current&&(l.current=(null==(n=null==(t=e.composedPath)?void 0:t.call(e))?void 0:n[0])||e.target)}),!0),vr("mousedown",(e=>{var t,n;a.current&&(l.current=(null==(n=null==(t=e.composedPath)?void 0:t.call(e))?void 0:n[0])||e.target)}),!0),vr("click",(e=>{l.current&&(u(e,(()=>l.current)),l.current=null)}),!0),vr("touchend",(e=>u(e,(()=>e.target instanceof HTMLElement?e.target:null))),!0),On("blur",(e=>u(e,(()=>window.document.activeElement instanceof HTMLIFrameElement?window.document.activeElement:null))),!0)}"function"==typeof Object.is&&Object.is;const{useState:yr,useEffect:br,useLayoutEffect:Er,useDebugValue:wr}=t;"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement;const Cr=(e=>e.useSyncExternalStore)(t);function kr(){let e;return{before({doc:t}){var n;let r=t.documentElement;e=(null!=(n=t.defaultView)?n:window).innerWidth-r.clientWidth},after({doc:t,d:n}){let r=t.documentElement,a=r.clientWidth-r.offsetWidth,u=e-a;n.style(r,"paddingRight",`${u}px`)}}}function Dr(){if(!(/iPhone/gi.test(window.navigator.platform)||/Mac/gi.test(window.navigator.platform)&&window.navigator.maxTouchPoints>0))return{};let e;return{before(){e=window.pageYOffset},after({doc:t,d:n,meta:r}){function a(e){return r.containers.flatMap((e=>e())).some((t=>t.contains(e)))}n.microTask((()=>{if("auto"!==window.getComputedStyle(t.documentElement).scrollBehavior){let e=Vn();e.style(t.documentElement,"scroll-behavior","auto"),n.add((()=>n.microTask((()=>e.dispose()))))}n.style(t.body,"marginTop",`-${e}px`),window.scrollTo(0,0);let r=null;n.addEventListener(t,"click",(e=>{if(e.target instanceof HTMLElement)try{let n=e.target.closest("a");if(!n)return;let{hash:u}=new URL(n.href),l=t.querySelector(u);l&&!a(l)&&(r=l)}catch{}}),!0),n.addEventListener(t,"touchmove",(e=>{e.target instanceof HTMLElement&&!a(e.target)&&e.preventDefault()}),{passive:!1}),n.add((()=>{window.scrollTo(0,window.pageYOffset+e),r&&r.isConnected&&(r.scrollIntoView({block:"nearest"}),r=null)}))}))}}}function Sr(e){let t={};for(let n of e)Object.assign(t,n(t));return t}let Ar=function(e,t){let n=new Map,r=new Set;return{getSnapshot:()=>n,subscribe:e=>(r.add(e),()=>r.delete(e)),dispatch(e,...a){let u=t[e].call(n,...a);u&&(n=u,r.forEach((e=>e())))}}}(0,{PUSH(e,t){var n;let r=null!=(n=this.get(e))?n:{doc:e,count:0,d:Vn(),meta:new Set};return r.count++,r.meta.add(t),this.set(e,r),this},POP(e,t){let n=this.get(e);return n&&(n.count--,n.meta.delete(t)),this},SCROLL_PREVENT({doc:e,d:t,meta:n}){let r={doc:e,d:t,meta:Sr(n)},a=[Dr(),kr(),{before({doc:e,d:t}){t.style(e.documentElement,"overflow","hidden")}}];a.forEach((({before:e})=>null==e?void 0:e(r))),a.forEach((({after:e})=>null==e?void 0:e(r)))},SCROLL_ALLOW({d:e}){e.dispose()},TEARDOWN({doc:e}){this.delete(e)}});Ar.subscribe((()=>{let e=Ar.getSnapshot(),t=new Map;for(let[n]of e)t.set(n,n.documentElement.style.overflow);for(let n of e.values()){let e="hidden"===t.get(n.doc),r=0!==n.count;(r&&!e||!r&&e)&&Ar.dispatch(n.count>0?"SCROLL_PREVENT":"SCROLL_ALLOW",n),0===n.count&&Ar.dispatch("TEARDOWN",n)}}));let xr=new Map,_r=new Map;function Fr(e,t=!0){dn((()=>{var n;if(!t)return;let r="function"==typeof e?e():e.current;if(!r)return;let a=null!=(n=_r.get(r))?n:0;return _r.set(r,a+1),0!==a||(xr.set(r,{"aria-hidden":r.getAttribute("aria-hidden"),inert:r.inert}),r.setAttribute("aria-hidden","true"),r.inert=!0),function(){var e;if(!r)return;let t=null!=(e=_r.get(r))?e:1;if(1===t?_r.delete(r):_r.set(r,t-1),1!==t)return;let n=xr.get(r);n&&(null===n["aria-hidden"]?r.removeAttribute("aria-hidden"):r.setAttribute("aria-hidden",n["aria-hidden"]),r.inert=n.inert,xr.delete(r))}}),[e,t])}function Nr({defaultContainers:t=[],portals:n,mainTreeNodeRef:r}={}){var a;let u=(0,e.useRef)(null!=(a=null==r?void 0:r.current)?a:null),l=Mn(u),o=hn((()=>{var e;let r=[];for(let e of t)null!==e&&(e instanceof HTMLElement?r.push(e):"current"in e&&e.current instanceof HTMLElement&&r.push(e.current));if(null!=n&&n.current)for(let e of n.current)r.push(e);for(let t of null!=(e=null==l?void 0:l.querySelectorAll("html > *, body > *"))?e:[])t!==document.body&&t!==document.head&&t instanceof HTMLElement&&"headlessui-portal-root"!==t.id&&(t.contains(u.current)||r.some((e=>t.contains(e)))||r.push(t));return r}));return{resolveContainers:o,contains:hn((e=>o().some((t=>t.contains(e))))),mainTreeNodeRef:u,MainTreeNode:(0,e.useMemo)((()=>function(){return null!=r?null:e.createElement(Cn,{features:wn.Hidden,ref:u})}),[u,r])}}var Lr=(e=>(e[e.Open=0]="Open",e[e.Closed=1]="Closed",e))(Lr||{}),Pr=(e=>(e[e.SetTitleId=0]="SetTitleId",e))(Pr||{});let Tr={0:(e,t)=>e.titleId===t.id?e:{...e,titleId:t.id}},Br=(0,e.createContext)(null);function Or(t){let n=(0,e.useContext)(Br);if(null===n){let e=new Error(`<${t} /> is missing a parent <Dialog /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(e,Or),e}return n}function Rr(e,t){return Xt(t.type,Tr,e,t)}Br.displayName="DialogContext";let jr=en.RenderStrategy|en.Static,Mr=un((function(t,n){var r;let a=En(),{id:u=`headlessui-dialog-${a}`,open:l,onClose:o,initialFocus:i,__demoMode:s=!1,...c}=t,[f,d]=(0,e.useState)(0),p=dr();void 0===l&&null!==p&&(l=(p&fr.Open)===fr.Open);let h=(0,e.useRef)(null),m=vn(h,n),v=Mn(h),g=t.hasOwnProperty("open")||null!==p,y=t.hasOwnProperty("onClose");if(!g&&!y)throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component.");if(!g)throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.");if(!y)throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.");if("boolean"!=typeof l)throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${l}`);if("function"!=typeof o)throw new Error(`You provided an \`onClose\` prop to the \`Dialog\`, but the value is not a function. Received: ${o}`);let b=l?0:1,[E,w]=(0,e.useReducer)(Rr,{titleId:null,descriptionId:null,panelRef:(0,e.createRef)()}),C=hn((()=>o(!1))),k=hn((e=>w({type:0,id:e}))),D=!!bn()&&!s&&0===b,S=f>1,A=null!==(0,e.useContext)(Br),[x,_]=function(){let t=(0,e.useContext)(nr),n=(0,e.useRef)([]),r=hn((e=>(n.current.push(e),t&&t.register(e),()=>a(e)))),a=hn((e=>{let r=n.current.indexOf(e);-1!==r&&n.current.splice(r,1),t&&t.unregister(e)})),u=(0,e.useMemo)((()=>({register:r,unregister:a,portals:n})),[r,a,n]);return[n,(0,e.useMemo)((()=>function({children:t}){return e.createElement(nr.Provider,{value:u},t)}),[u])]}(),{resolveContainers:F,mainTreeNodeRef:N,MainTreeNode:L}=Nr({portals:x,defaultContainers:[null!=(r=E.panelRef.current)?r:h.current]}),P=S?"parent":"leaf",T=null!==p&&(p&fr.Closing)===fr.Closing,B=!A&&!T&&D,O=(0,e.useCallback)((()=>{var e,t;return null!=(t=Array.from(null!=(e=null==v?void 0:v.querySelectorAll("body > *"))?e:[]).find((e=>"headlessui-portal-root"!==e.id&&e.contains(N.current)&&e instanceof HTMLElement)))?t:null}),[N]);Fr(O,B);let R=!!S||D,j=(0,e.useCallback)((()=>{var e,t;return null!=(t=Array.from(null!=(e=null==v?void 0:v.querySelectorAll("[data-headlessui-portal]"))?e:[]).find((e=>e.contains(N.current)&&e instanceof HTMLElement)))?t:null}),[N]);Fr(j,R),gr(F,C,!(!D||S));let M=!(S||0!==b);zn(null==v?void 0:v.defaultView,"keydown",(e=>{M&&(e.defaultPrevented||e.key===yn.Escape&&(e.preventDefault(),e.stopPropagation(),C()))})),function(e,t,n=(()=>[document.body])){!function(e,t,n){let r=function(e){return Cr(e.subscribe,e.getSnapshot,e.getSnapshot)}(Ar),a=e?r.get(e):void 0,u=!!a&&a.count>0;dn((()=>{if(e&&t)return Ar.dispatch("PUSH",e,n),()=>Ar.dispatch("POP",e,n)}),[t,e])}(e,t,(e=>{var t;return{containers:[...null!=(t=e.containers)?t:[],n]}}))}(v,!(T||0!==b||A),F),(0,e.useEffect)((()=>{if(0!==b||!h.current)return;let e=new ResizeObserver((e=>{for(let t of e){let e=t.target.getBoundingClientRect();0===e.x&&0===e.y&&0===e.width&&0===e.height&&C()}}));return e.observe(h.current),()=>e.disconnect()}),[b,h,C]);let[z,I]=function(){let[t,n]=(0,e.useState)([]);return[t.length>0?t.join(" "):void 0,(0,e.useMemo)((()=>function(t){let r=hn((e=>(n((t=>[...t,e])),()=>n((t=>{let n=t.slice(),r=n.indexOf(e);return-1!==r&&n.splice(r,1),n}))))),a=(0,e.useMemo)((()=>({register:r,slot:t.slot,name:t.name,props:t.props})),[r,t.slot,t.name,t.props]);return e.createElement(lr.Provider,{value:a},t.children)}),[n])]}(),U=(0,e.useMemo)((()=>[{dialogState:b,close:C,setTitleId:k},E]),[b,E,C,k]),V=(0,e.useMemo)((()=>({open:0===b})),[b]),$={ref:m,id:u,role:"dialog","aria-modal":0===b||void 0,"aria-labelledby":E.titleId,"aria-describedby":z};return e.createElement(mr,{type:"Dialog",enabled:0===b,element:h,onUpdate:hn(((e,t)=>{"Dialog"===t&&Xt(e,{[hr.Add]:()=>d((e=>e+1)),[hr.Remove]:()=>d((e=>e-1))})}))},e.createElement(Jn,{force:!0},e.createElement(ur,null,e.createElement(Br.Provider,{value:U},e.createElement(ur.Group,{target:h},e.createElement(Jn,{force:!1},e.createElement(I,{slot:V,name:"Dialog.Description"},e.createElement(qn,{initialFocus:i,containers:F,features:D?Xt(P,{parent:qn.features.RestoreFocus,leaf:qn.features.All&~qn.features.FocusLock}):qn.features.None},e.createElement(_,null,nn({ourProps:$,theirProps:c,slot:V,defaultTag:"div",features:jr,visible:0===b,name:"Dialog"}))))))))),e.createElement(L,null))})),zr=un((function(t,n){let r=En(),{id:a=`headlessui-dialog-backdrop-${r}`,...u}=t,[{dialogState:l},o]=Or("Dialog.Backdrop"),i=vn(n);(0,e.useEffect)((()=>{if(null===o.panelRef.current)throw new Error("A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.")}),[o.panelRef]);let s=(0,e.useMemo)((()=>({open:0===l})),[l]);return e.createElement(Jn,{force:!0},e.createElement(ur,null,nn({ourProps:{ref:i,id:a,"aria-hidden":!0},theirProps:u,slot:s,defaultTag:"div",name:"Dialog.Backdrop"})))})),Ir=un((function(t,n){let r=En(),{id:a=`headlessui-dialog-panel-${r}`,...u}=t,[{dialogState:l},o]=Or("Dialog.Panel"),i=vn(n,o.panelRef),s=(0,e.useMemo)((()=>({open:0===l})),[l]);return nn({ourProps:{ref:i,id:a,onClick:hn((e=>{e.stopPropagation()}))},theirProps:u,slot:s,defaultTag:"div",name:"Dialog.Panel"})})),Ur=un((function(t,n){let r=En(),{id:a=`headlessui-dialog-overlay-${r}`,...u}=t,[{dialogState:l,close:o}]=Or("Dialog.Overlay");return nn({ourProps:{ref:vn(n),id:a,"aria-hidden":!0,onClick:hn((e=>{if(e.target===e.currentTarget){if(function(e){let t=e.parentElement,n=null;for(;t&&!(t instanceof HTMLFieldSetElement);)t instanceof HTMLLegendElement&&(n=t),t=t.parentElement;let r=""===(null==t?void 0:t.getAttribute("disabled"));return(!r||!function(e){if(!e)return!1;let t=e.previousElementSibling;for(;null!==t;){if(t instanceof HTMLLegendElement)return!1;t=t.previousElementSibling}return!0}(n))&&r}(e.currentTarget))return e.preventDefault();e.preventDefault(),e.stopPropagation(),o()}}))},theirProps:u,slot:(0,e.useMemo)((()=>({open:0===l})),[l]),defaultTag:"div",name:"Dialog.Overlay"})})),Vr=un((function(t,n){let r=En(),{id:a=`headlessui-dialog-title-${r}`,...u}=t,[{dialogState:l,setTitleId:o}]=Or("Dialog.Title"),i=vn(n);(0,e.useEffect)((()=>(o(a),()=>o(null))),[a,o]);let s=(0,e.useMemo)((()=>({open:0===l})),[l]);return nn({ourProps:{ref:i,id:a},theirProps:u,slot:s,defaultTag:"h2",name:"Dialog.Title"})})),$r=Object.assign(Mr,{Backdrop:zr,Panel:Ir,Overlay:Ur,Title:Vr,Description:sr});function Wr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Hr=function(t){var n=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,u,l,o=[],i=!0,s=!1;try{if(u=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;i=!1}else for(;!(i=(r=u.call(n)).done)&&(o.push(r.value),o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{if(!i&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,e.useState)(!1),2),r=n[0],a=n[1],u=t.buttonText,l=t.formTitle,o=t.childComponent,i=t.addStyle,s=function(){a(!1)};return e.createElement(e.Fragment,null,e.createElement("div",{className:""},e.createElement("button",{type:"button",onClick:function(){a(!0)},className:i},u)),e.createElement($r,{open:r,onClose:s,className:""},e.createElement("div",{className:"dialogMain"},e.createElement($r.Panel,{className:"dialogMain-content"},e.createElement($r.Title,{style:{padding:"0 0 10px 0"}},l),e.cloneElement(o,{handleClose:s}),e.createElement("button",{type:"button",onClick:function(){return a(!1)},className:"button"},"Закрыть")))))};function Qr(){var t=Ae.get("User"),n=(0,e.useContext)(r),a=n.isAuthenticated,u=n.logout;return e.createElement("div",{className:"header__auth_menu"},e.createElement("nav",{className:"header__nav_main"},e.createElement("ul",{className:"header__nav_ul"},e.createElement("li",null,e.createElement(Ce,{to:"/"},"Главная")),e.createElement("li",null,e.createElement(Ce,{to:"/guides"},"Гайды")))),e.createElement("nav",{className:"header__navigation_login"},a?e.createElement(e.Fragment,null,e.createElement("div",null,t),e.createElement("button",{type:"button",onClick:function(){return u()},className:"button"},"ВЫЙТИ")):e.createElement(e.Fragment,null,e.createElement("div",null,e.createElement(Hr,{childComponent:e.createElement(Yt,null),buttonText:"Регистрация",formTitle:"Форма регистрации",addStyle:"button__reg button"})),e.createElement("div",null,e.createElement(Hr,{childComponent:e.createElement(qt,null),buttonText:"Войти",formTitle:"Форма авторизации",addStyle:"button__log button"})))))}function qr(t){var n=t.children;return e.createElement("div",{className:"page"},e.createElement(Qr,null),n)}const Gr=a.p+"ed0ee0b7eba8a649d439.png";function Kr(t){var n=t.PathDisplay;return e.createElement("ul",{className:"header__guild-contacts ".concat(n)},e.createElement("li",{className:"",style:{backgroundColor:"var(--button-discrod-color)"}},e.createElement("div",{className:"social__logo"},e.createElement("img",{src:"./assets/img/discord-mark-white.png",alt:""})),e.createElement("a",{href:"https://discord.gg/fjVkeJaKjc",target:"_blank",rel:"noreferrer"},"Discord")),e.createElement("li",{className:"",style:{backgroundColor:"var(--button-raiderio-color)"}},e.createElement("div",{className:"social__logo"},e.createElement("img",{src:"./assets/img/raiderio.png",alt:""})),e.createElement("a",{href:"https://raider.io/guilds/eu/howling-fjord/%D0%9A%D0%BB%D1%8E%D1%87%D0%B8%D0%BA%20%D0%B2%20%D0%B4%D1%83%D1%80%D0%BA%D1%83",target:"_blank",rel:"noreferrer"},"Raider.io")),e.createElement("li",{className:"",style:{backgroundColor:"var(--button-warcraftlogs-color)"}},e.createElement("div",{className:"social__logo"},e.createElement("img",{src:Gr,alt:""})),e.createElement("a",{href:"https://www.warcraftlogs.com/guild/eu/%D1%80%D0%B5%D0%B2%D1%83%D1%89%D0%B8%D0%B9-%D1%84%D1%8C%D0%BE%D1%80%D0%B4/%D0%9A%D0%BB%D1%8E%D1%87%D0%B8%D0%BA%20%D0%B2%20%D0%B4%D1%83%D1%80%D0%BA%D1%83",target:"_blank",rel:"noreferrer"},"Warcraftlogs")," "))}function Yr(e){return Yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yr(e)}function Xr(){Xr=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},u="function"==typeof Symbol?Symbol:{},l=u.iterator||"@@iterator",o=u.asyncIterator||"@@asyncIterator",i=u.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var u=t&&t.prototype instanceof g?t:g,l=Object.create(u.prototype),o=new N(r||[]);return a(l,"_invoke",{value:A(e,n,o)}),l}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function g(){}function y(){}function b(){}var E={};s(E,l,(function(){return this}));var w=Object.getPrototypeOf,C=w&&w(w(L([])));C&&C!==n&&r.call(C,l)&&(E=C);var k=b.prototype=g.prototype=Object.create(E);function D(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(a,u,l,o){var i=f(e[a],e,u);if("throw"!==i.type){var s=i.arg,c=s.value;return c&&"object"==Yr(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,l,o)}),(function(e){n("throw",e,l,o)})):t.resolve(c).then((function(e){s.value=e,l(s)}),(function(e){return n("throw",e,l,o)}))}o(i.arg)}var u;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return u=u?u.then(a,a):a()}})}function A(t,n,r){var a=d;return function(u,l){if(a===h)throw new Error("Generator is already running");if(a===m){if("throw"===u)throw l;return{value:e,done:!0}}for(r.method=u,r.arg=l;;){var o=r.delegate;if(o){var i=x(o,r);if(i){if(i===v)continue;return i}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===d)throw a=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=h;var s=f(t,n,r);if("normal"===s.type){if(a=r.done?m:p,s.arg===v)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=m,r.method="throw",r.arg=s.arg)}}}function x(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,x(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var u=f(a,t.iterator,n.arg);if("throw"===u.type)return n.method="throw",n.arg=u.arg,n.delegate=null,v;var l=u.arg;return l?l.done?(n[t.resultName]=l.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):l:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function L(t){if(t||""===t){var n=t[l];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,u=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return u.next=u}}throw new TypeError(Yr(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,i,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,i,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},D(S.prototype),s(S.prototype,o,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,a,u){void 0===u&&(u=Promise);var l=new S(c(e,n,r,a),u);return t.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},D(k),s(k,i,"Generator"),s(k,l,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=L,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return o.type="throw",o.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var u=this.tryEntries.length-1;u>=0;--u){var l=this.tryEntries[u],o=l.completion;if("root"===l.tryLoc)return a("end");if(l.tryLoc<=this.prev){var i=r.call(l,"catchLoc"),s=r.call(l,"finallyLoc");if(i&&s){if(this.prev<l.catchLoc)return a(l.catchLoc,!0);if(this.prev<l.finallyLoc)return a(l.finallyLoc)}else if(i){if(this.prev<l.catchLoc)return a(l.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<l.finallyLoc)return a(l.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var u=a;break}}u&&("break"===e||"continue"===e)&&u.tryLoc<=t&&t<=u.finallyLoc&&(u=null);var l=u?u.completion:{};return l.type=e,l.arg=t,u?(this.method="next",this.next=u.finallyLoc,v):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;F(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:L(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Jr(e,t,n,r,a,u,l){try{var o=e[u](l),i=o.value}catch(e){return void n(e)}o.done?t(i):Promise.resolve(i).then(r,a)}function Zr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ea(t){var n=t.PathDisplay,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,u,l,o=[],i=!0,s=!1;try{if(u=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;i=!1}else for(;!(i=(r=u.call(n)).done)&&(o.push(r.value),o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{if(!i&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Zr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,e.useState)(null),2),a=r[0],u=r[1];function l(){var e;return e=Xr().mark((function e(){return Xr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:try{fetch("https://raider.io/api/v1/guilds/profile?region=eu&realm=howling-fjord&name=%D0%9A%D0%BB%D1%8E%D1%87%D0%B8%D0%BA%20%D0%B2%20%D0%B4%D1%83%D1%80%D0%BA%D1%83&fields=raid_progression").then((function(e){if(!e.ok)throw new Error("Network response was not ok");return e.json()})).then((function(e){u(e)})).catch((function(e){console.log(e)}))}catch(e){console.log(e)}case 1:case"end":return e.stop()}}),e)})),l=function(){var t=this,n=arguments;return new Promise((function(r,a){var u=e.apply(t,n);function l(e){Jr(u,r,a,l,o,"next",e)}function o(e){Jr(u,r,a,l,o,"throw",e)}l(void 0)}))},l.apply(this,arguments)}return(0,e.useEffect)((function(){!function(){l.apply(this,arguments)}()}),[]),a?e.createElement("article",{className:"main__header-progress ".concat(n)},e.createElement("h2",null,"РЕЙДОВЫЙ ПРОГРЕСС ГИЛЬДИИ"),e.createElement("div",{className:"progressCard"},e.createElement("h3",null,"Амирдрассил, Надежда Сна"),e.createElement("ul",null,e.createElement("li",null,"Нормал"," ",a.raid_progression["amirdrassil-the-dreams-hope"].normal_bosses_killed," / ",a.raid_progression["amirdrassil-the-dreams-hope"].total_bosses),e.createElement("li",null,"Героик"," ",a.raid_progression["amirdrassil-the-dreams-hope"].heroic_bosses_killed," / ",a.raid_progression["amirdrassil-the-dreams-hope"].total_bosses),e.createElement("li",null,"Мифик"," ",a.raid_progression["amirdrassil-the-dreams-hope"].mythic_bosses_killed," / ",a.raid_progression["amirdrassil-the-dreams-hope"].total_bosses)),e.createElement("img",{src:"assets/img/6K6Z89WII3L01693945700775.avif",alt:""})),e.createElement("div",{className:"progressCard"},e.createElement("h3",null,"Аберрий, Затененное Горнило"),e.createElement("ul",null,e.createElement("li",null,"Нормал"," ",a.raid_progression["aberrus-the-shadowed-crucible"].normal_bosses_killed," / ",a.raid_progression["aberrus-the-shadowed-crucible"].total_bosses),e.createElement("li",null,"Героик"," ",a.raid_progression["aberrus-the-shadowed-crucible"].heroic_bosses_killed," / ",a.raid_progression["aberrus-the-shadowed-crucible"].total_bosses),e.createElement("li",null,"Мифик"," ",a.raid_progression["aberrus-the-shadowed-crucible"].mythic_bosses_killed," / ",a.raid_progression["aberrus-the-shadowed-crucible"].total_bosses)),e.createElement("img",{src:"assets/img/FpaAUhx.jpg",alt:""})),e.createElement("div",{className:"progressCard"},e.createElement("h3",null,"Хранилище Воплощений"),e.createElement("ul",null,e.createElement("li",null,"Нормал ",a.raid_progression["vault-of-the-incarnates"].normal_bosses_killed," / ",a.raid_progression["vault-of-the-incarnates"].total_bosses),e.createElement("li",null,"Героик ",a.raid_progression["vault-of-the-incarnates"].heroic_bosses_killed," / ",a.raid_progression["vault-of-the-incarnates"].total_bosses),e.createElement("li",null,"Мифик ",a.raid_progression["vault-of-the-incarnates"].mythic_bosses_killed," / ",a.raid_progression["vault-of-the-incarnates"].total_bosses)),e.createElement("img",{src:"assets/img/Raid-Finder-Wing-2-Vault-of-the-Incarnates.jpg",alt:""}))):e.createElement("div",null,"Loading...")}var ta;function na(t){var n=t.title,r=t.p,a=ee(),u="/"===a.pathname?"bg1":"/guides"===a.pathname?"display-none":"bgDefault",l="/guides"===a.pathname?"header_resize":"bgDefault";return e.createElement("header",{className:"header header_second ".concat(l)},e.createElement("video",{autoPlay:!0,loop:!0,muted:!0,className:"".concat(u)},e.createElement("source",{src:"assets/video/M1QEYAXEAWPX1699388765299.mp4",type:"video/mp4"}),"Your browser does not support the video tag."),e.createElement("div",{className:"container"},e.createElement("section",{className:" header__guild-info "},e.createElement("div",{className:"space__manager"},e.createElement("div",{className:"space__huge ".concat(u)}),e.createElement("div",{className:"space__huge ".concat(u)}),e.createElement("div",{className:"space__large"})),e.createElement("h1",null,n),r,e.createElement(Kr,{PathDisplay:u})),e.createElement("div",{className:"header__space"},e.createElement("div",{className:"space__manager"},e.createElement("div",{className:"space__small ".concat(u)}),e.createElement("div",{className:"space__small ".concat(u)}),e.createElement("div",{className:"space__small ".concat(u)}),e.createElement("div",{className:"space__large ".concat(u)}),e.createElement("div",{className:"space__large ".concat(u)}))),e.createElement(ea,{PathDisplay:u})))}function ra(){return e.createElement("footer",{className:"primary-footer"},e.createElement("div",{className:"container"},e.createElement("div",{className:"footer__content"},e.createElement("p",null,"Ключик в Дурку - погружение в мир смелых интриг и захватывающих приключений в World of Warcraft! Присоединяйся к нам и завоюй ключи к неизведанным тайнам и богатствам Азерота. Наша гильдия объединяет единомышленников, готовых идти вглубь темных подземелий и сражаться с силами зла. Ощути братство и поддержку наших гильдейцев, и дай своим навыкам вскрыть двери в новые миры. Добро пожаловать в Ключик в Дурку - твой путь к славе и приключениям в WoW!"),e.createElement("span",null,"© 2023 KVD INC. by weyzy"))))}a(155);var aa=new Uint8Array(16);function ua(){if(!ta&&!(ta="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return ta(aa)}const la=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var oa=[],ia=0;ia<256;++ia)oa.push((ia+256).toString(16).substr(1));const sa=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(oa[e[t+0]]+oa[e[t+1]]+oa[e[t+2]]+oa[e[t+3]]+"-"+oa[e[t+4]]+oa[e[t+5]]+"-"+oa[e[t+6]]+oa[e[t+7]]+"-"+oa[e[t+8]]+oa[e[t+9]]+"-"+oa[e[t+10]]+oa[e[t+11]]+oa[e[t+12]]+oa[e[t+13]]+oa[e[t+14]]+oa[e[t+15]]).toLowerCase();if(!function(e){return"string"==typeof e&&la.test(e)}(n))throw TypeError("Stringified UUID is invalid");return n},ca=function(e,t,n){var r=(e=e||{}).random||(e.rng||ua)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=r[a];return t}return sa(r)};function fa(e){return fa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fa(e)}function da(){da=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},u="function"==typeof Symbol?Symbol:{},l=u.iterator||"@@iterator",o=u.asyncIterator||"@@asyncIterator",i=u.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var u=t&&t.prototype instanceof g?t:g,l=Object.create(u.prototype),o=new N(r||[]);return a(l,"_invoke",{value:A(e,n,o)}),l}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function g(){}function y(){}function b(){}var E={};s(E,l,(function(){return this}));var w=Object.getPrototypeOf,C=w&&w(w(L([])));C&&C!==n&&r.call(C,l)&&(E=C);var k=b.prototype=g.prototype=Object.create(E);function D(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(a,u,l,o){var i=f(e[a],e,u);if("throw"!==i.type){var s=i.arg,c=s.value;return c&&"object"==fa(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,l,o)}),(function(e){n("throw",e,l,o)})):t.resolve(c).then((function(e){s.value=e,l(s)}),(function(e){return n("throw",e,l,o)}))}o(i.arg)}var u;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return u=u?u.then(a,a):a()}})}function A(t,n,r){var a=d;return function(u,l){if(a===h)throw new Error("Generator is already running");if(a===m){if("throw"===u)throw l;return{value:e,done:!0}}for(r.method=u,r.arg=l;;){var o=r.delegate;if(o){var i=x(o,r);if(i){if(i===v)continue;return i}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===d)throw a=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=h;var s=f(t,n,r);if("normal"===s.type){if(a=r.done?m:p,s.arg===v)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=m,r.method="throw",r.arg=s.arg)}}}function x(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,x(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var u=f(a,t.iterator,n.arg);if("throw"===u.type)return n.method="throw",n.arg=u.arg,n.delegate=null,v;var l=u.arg;return l?l.done?(n[t.resultName]=l.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):l:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function L(t){if(t||""===t){var n=t[l];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,u=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return u.next=u}}throw new TypeError(fa(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,i,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,i,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},D(S.prototype),s(S.prototype,o,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,a,u){void 0===u&&(u=Promise);var l=new S(c(e,n,r,a),u);return t.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},D(k),s(k,i,"Generator"),s(k,l,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=L,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return o.type="throw",o.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var u=this.tryEntries.length-1;u>=0;--u){var l=this.tryEntries[u],o=l.completion;if("root"===l.tryLoc)return a("end");if(l.tryLoc<=this.prev){var i=r.call(l,"catchLoc"),s=r.call(l,"finallyLoc");if(i&&s){if(this.prev<l.catchLoc)return a(l.catchLoc,!0);if(this.prev<l.finallyLoc)return a(l.finallyLoc)}else if(i){if(this.prev<l.catchLoc)return a(l.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<l.finallyLoc)return a(l.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var u=a;break}}u&&("break"===e||"continue"===e)&&u.tryLoc<=t&&t<=u.finallyLoc&&(u=null);var l=u?u.completion:{};return l.type=e,l.arg=t,u?(this.method="next",this.next=u.finallyLoc,v):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;F(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:L(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function pa(e,t,n,r,a,u,l){try{var o=e[u](l),i=o.value}catch(e){return void n(e)}o.done?t(i):Promise.resolve(i).then(r,a)}function ha(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ma=function(t){var n=t.slice,r=t.olstart,a=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,u,l,o=[],i=!0,s=!1;try{if(u=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;i=!1}else for(;!(i=(r=u.call(n)).done)&&(o.push(r.value),o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{if(!i&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ha(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ha(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,e.useState)(null),2),u=a[0],l=a[1],o=ca();function i(){var e;return e=da().mark((function e(){return da().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:try{fetch("/guild-data").then((function(e){if(!e.ok)throw new Error("Network response was not ok");return e.json()})).then((function(e){l(e)})).catch((function(e){console.log("Ошибка fetchData guild-data ".concat(e))}))}catch(e){console.log(e)}case 1:case"end":return e.stop()}}),e)})),i=function(){var t=this,n=arguments;return new Promise((function(r,a){var u=e.apply(t,n);function l(e){pa(u,r,a,l,o,"next",e)}function o(e){pa(u,r,a,l,o,"throw",e)}l(void 0)}))},i.apply(this,arguments)}(0,e.useEffect)((function(){!function(){i.apply(this,arguments)}()}),[]);var s={"Death Knight":"classicon_deathknight","Demon Hunter":"classicon_demonhunter",Druid:"classicon_druid",Evoker:"classicon_evoker",Hunter:"classicon_hunter",Mage:"classicon_mage",Monk:"classicon_monk",Paladin:"classicon_paladin",Priest:"classicon_priest",Rogue:"classicon_rogue",Shaman:"classicon_shaman",Warlock:"classicon_warlock",Warrior:"classicon_warrior"};if(!u)return e.createElement("div",null,"Loading...");u.sort((function(e,t){return t.mythic_plus_score_dfs3-e.mythic_plus_score_dfs3}));var c=u.filter((function(e){return"Ключик в дурку"===e.player_guild})).slice(n[0],n[1]);return e.createElement(e.Fragment,null," ",e.createElement("ol",{className:"topmplus__main_flex",start:r},c.filter((function(e){return"Ключик в дурку"===e.player_guild})).map((function(t){return e.createElement("li",{key:o,className:"topmplus__row"},e.createElement("img",{src:"/class/".concat(s[t.class],".jpg"),alt:"",className:"topmplus__classicon"}),e.createElement("div",{className:"topmplus__nickname"},t.character_name),e.createElement("div",{className:"topmplus__main-rio"},t.mythic_plus_score_dfs3.toFixed()))}))))};function va(){return e.createElement("section",{className:"mplus__top"},e.createElement("div",{className:"container"},e.createElement("section",{className:"topmplus__main"},e.createElement("h2",null,"ЛУЧШИЕ КЛЮЧНИКИ КВД"),e.createElement("div",{className:"topmplus__main-ul"},e.createElement(ma,{slice:[0,10],olstart:0}),e.createElement(ma,{slice:[10,20],olstart:10})))))}function ga(){return e.createElement("section",{className:"page-About"},e.createElement("div",{className:"container"},e.createElement("h2",null,"О ГИЛЬДИИ"),e.createElement("section",null,e.createElement("h3",null,"📅 Плановые рейды: 📅"),e.createElement("p",null,"Первый состав - Понедельник, Среда, Четверг в 19:30/20:00 - 23:00 (МСК, UTC+3) - В первые КД возможно доп рт по вторникам."),e.createElement("p",null,"Второй состав - Пятница, Суббота в 19:30/20:00 - 23:00 (МСК, UTC+3).")),e.createElement("hr",null),e.createElement("section",null,e.createElement("h3",null,"⚔️ Что предлагает гильдия? ⚔️"),e.createElement("p",null,e.createElement("strong",null,"Розыгрыши жетонов в голде:")," Каждую неделю мы устраиваем розыгрыши эквивалентов 1-3 жетонов в золоте среди статической группы. Это отличная мотивация и вознаграждение за вашу активность."),e.createElement("p",null,e.createElement("strong",null,"Премии и привилегии:")," Мы покрываем расходы на ремонт экипировки через гильдейский бюджет. Кроме того, пятерым лучшим игрокам недели предоставляется доступ к элитному слоту гильд-банка, где они могут найти эксклюзивные награды и ресурсы."),e.createElement("p",null,e.createElement("strong",null,"Знания и поддержка:")," У нас есть опытные игроки, готовые поделиться своими знаниями и помочь новичкам и казуальным игрокам. Мы стремимся создать дружественную и поддерживающую атмосферу в гильдии."),e.createElement("p",null,e.createElement("strong",null,"Совместные достижения:"),' Мы организуем совместное выполнение различных достижений, помогая вам достичь "Славы рейдера" и других не менее престижных наград.'),e.createElement("p",null,e.createElement("strong",null,"Интерес к рейтингу:")," Мы часто устраиваем экспедиции в Mythic+ ключах и у нас в гильдии есть игроки, заинтересованные в достижении рейтинга р1 в ключах Mythic+. Если вы стремитесь к высоким достижениям в этой области, то у нас вы найдете союзников с подобными амбициями. Так же гильд мастер лично помогает закрывать всем членам статика +20 ключи на виклик, если у них нету времени сделать это самим ;)")),e.createElement("hr",null),e.createElement("section",null,e.createElement("h3",null,"👪 Востребованные спеки: 👪"),e.createElement("p",null,"Мы не ограничиваемся только определенными спеками, и верим, что каждый игрок может внести свой вклад в наш успех. Мы также верим что лучше вы будете БМом раскрывающимся на 100%, чем демон локом, который раскрыт на 60% ;) Но при наличии выбора - у нас в данный момент востребовано следующее:"),e.createElement("h3",null,"Первый состав:"),e.createElement("ul",null,e.createElement("li",null,"хил (пал/прист)"),e.createElement("li",null,"рдд (бм, ауг)"),e.createElement("li",null,"танк (монк/дк/пал)"),e.createElement("li",null,"Готовы так же рассмотреть энха.")),e.createElement("h3",null,"Второй состав:"),e.createElement("ul",null,e.createElement("li",null,"Хил (пал/прист/дракон)"),e.createElement("li",null,"рдд (лок, маг)"),e.createElement("li",null,"мили (дх, энх, вар)"),e.createElement("li",null,"Второй состав молодой, готовы рассмотреть любые предложения.")),e.createElement("p",null,"Так же у нас в гильдии много людей, заинтересованных в ключах, которым не хватает танка. Если вы танк, с приоритетом на ключи, но при этом желаете поддерживать прогресс в рейде - наша гильдия готова поддержать вас допуская к рекилам на замене в рейд.")),e.createElement("hr",null),e.createElement("address",null,e.createElement("h3",null,"📝 Свяжитесь с нами: 📝"),e.createElement("p",null,e.createElement("strong",null,"Discord (Канал гильдии):")," ",e.createElement("a",{rel:"noopener nofollow noreferrer",href:"https://discord.gg/fjVkeJaKjc",target:"_blank"},e.createElement("em",null,"Ключик в дурку"))),e.createElement("p",null,e.createElement("strong",null,"Discord (Представители):")," Peksal1, weyzy, graciyaslona"),e.createElement("p",null,e.createElement("strong",null,"Battle.net (Представители):")," Peksal1#2832"),e.createElement("p",null,e.createElement("strong",null,"В игре: (Представители):")," ",e.createElement("em",null,"Иллисиан, Чоски, Кружкасоплей")))))}function ya(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ba={"Рыцарь смерти":"#C41E3A","Охотник на демонов":"#A330C9",Друид:"#FF7C0A",Пробудитель:"#33937F",Охотник:"#AAD372",Маг:"#3FC7EB",Монах:"#00e086",Палладин:"#F48CBA",Жрец:"#FFF",Разбойник:"#FFF468",Шаман:"#0070DD",Чернокнижник:"#8788EE",Воин:"#C69B6D"},Ea={Воин:{title:"Небесная цитадель",discordInvite:"https://discord.gg/xmcWP5b"},Палладин:{title:"Обитель света",discordInvite:"https://discord.gg/yAhvHbM"},Охотник:{title:"Приют стрелка",discordInvite:"https://discordapp.com/invite/gjvNbyj"},Разбойник:{title:"Палата теней",discordInvite:"https://discordapp.com/invite/GfcqXR5"},Жрец:{title:"Храм света пустоты",discordInvite:"https://discord.gg/G8zUnFxEs4"},"Рыцарь смерти":{title:"Цитадель Ледяной Короны",discordInvite:"https://discord.gg/QktwJdq"},Шаман:{title:"Водоворот",discordInvite:"https://discord.gg/8Bag6kT"},Маг:{title:"Оплот Хранителя",discordInvite:"https://discord.gg/bSwXsKG"},Чернокнижник:{title:"Разлом Зловещего Шрама",discordInvite:"https://discord.gg/tnfqRE4GZ9"},Монах:{title:"Храм Пяти Рассветов",discordInvite:"https://discord.gg/P52zeKR"},Друид:{title:"Роща Снов",discordInvite:"https://discordapp.com/invite/5uPBe28"},"Охотник на демонов":{title:"Небесная Цитадель",discordInvite:"https://discord.gg/hQbyRwZugV"},Пробудитель:{title:"Храм Драконьего Покоя",discordInvite:"https://discord.gg/5yMyjh9SG7"}};function wa(){var t=ca();return e.createElement("section",{className:"page-About"},e.createElement("div",{className:"container"},e.createElement("div",{className:"guides-content"},e.createElement("section",null,e.createElement("h2",null,"КЛАССОВЫЕ РЕСУРЫ"),e.createElement("p",null,"Ознакомиьтесь со своими гайдами, на ваш спек/класс. Найдите бис шмот,трини и статы."),e.createElement("ul",null,e.createElement("li",null,e.createElement("a",{href:"https://www.wowhead.com/guides/classes",target:"_blank",rel:"noreferrer"},"WoWHead"))),e.createElement("br",null),e.createElement("section",null,e.createElement("h3",null,"DISCORD СООБЩЕСТВА"),e.createElement("ul",null,Object.entries(Ea).map((function(n){var r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,u,l,o=[],i=!0,s=!1;try{if(u=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;i=!1}else for(;!(i=(r=u.call(n)).done)&&(o.push(r.value),o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{if(!i&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ya(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ya(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(n,2),a=r[0],u=r[1];return e.createElement("li",{key:t},e.createElement("span",{style:{color:ba[a]}},a),e.createElement("span",null," - "),e.createElement("a",{href:u.discordInvite,target:"_blank",rel:"noreferrer"},u.title))}))),e.createElement("br",null)),e.createElement("section",null,e.createElement("h3",null,"БИС ЛИСТЫ"),e.createElement("ul",null,e.createElement("li",null,e.createElement("a",{href:"https://bloodmallet.com/",target:"_blank",rel:"noreferrer"},"Трини для ДД bloodmallet")),e.createElement("li",null,e.createElement("a",{href:"https://questionablyepic.com/live/",target:"_blank",rel:"noreferrer"},"Трини для хила questionablyepic"))))),e.createElement("section",null,e.createElement("h2",null,"ГРУППОВОЙ И РЕЙДОВЫ КОНТЕНТ"),e.createElement("p",null,"Полезные ресурсы, викауры, аддоны."),e.createElement("section",null,e.createElement("h3",null,"КЛЮЧИ"),e.createElement("ul",null,e.createElement("li",null,e.createElement("a",{href:"https://murlok.io/",target:"_blank",rel:"noreferrer"},"Шмот, камни, таланты, чарки топовых игроков murlok")),e.createElement("li",null,e.createElement("a",{href:"https://u.gg/wow",target:"_blank",rel:"noreferrer"},"Шмот, камни, таланты, чарки топовых игроков u.gg")),e.createElement("li",null,e.createElement("a",{href:"https://keystone.guru/",target:"_blank",rel:"noreferrer"},"Роуты keystone.guru")),e.createElement("li",null,e.createElement("a",{href:"https://mythicstats.com/meta",target:"_blank",rel:"noreferrer"},"Статистика по ключам mythicstats")),e.createElement("li",null,e.createElement("a",{href:"https://bestkeystone.com/",target:"_blank",rel:"noreferrer"},"Статистика по ключам bestkeystone")),e.createElement("li",null,e.createElement("a",{href:"https://mythicplus.gg/#/",target:"_blank",rel:"noreferrer"},"Статистика по ключам mythicplus")),e.createElement("br",null),e.createElement("li",null,e.createElement("a",{href:"https://wago.io/plater/plater-profiles",target:"_blank",rel:"noreferrer"},"Plater Профили")),e.createElement("li",null,e.createElement("a",{href:"https://wago.io/dfdungeons",target:"_blank",rel:"noreferrer"},"Викаура на все данжи")),e.createElement("li",null,e.createElement("a",{href:"https://wago.io/iYFPlj7p7",target:"_blank",rel:"noreferrer"},"Скрывает чернила в Троне приливов")),e.createElement("li",null,e.createElement("a",{href:" https://wago.io/LyVvlKxvs",target:"_blank"},"Spell CDs on Nameplate")),e.createElement("li",null,e.createElement("a",{href:"https://wago.io/TargetedSpells",target:"_blank",rel:"noreferrer"},"Targeted Spells"))),e.createElement("br",null)),e.createElement("section",null,e.createElement("h3",null,"РЕЙДЫ"),e.createElement("ul",null,e.createElement("li",null,e.createElement("a",{href:"https://tacticalairhorse.itch.io/amirdrassil",target:"_blank",rel:"noreferrer"},"Изучаем тактики играя!")),e.createElement("li",null,e.createElement("a",{href:"https://www.warcraftlogs.com/",target:"_blank",rel:"noreferrer"},"Warcraftlogs")),e.createElement("li",null,e.createElement("a",{href:"https://www.wowhead.com/ru/item=188152/%D0%BE%D1%81%D0%BA%D0%BE%D0%BB%D0%BE%D0%BA-%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B2%D1%80%D0%B0%D1%82%D0%B0%D0%BC%D0%B8",target:"_blank",rel:"noreferrer"},"Юзать гейты по бинду")),e.createElement("li",null,e.createElement("a",{href:"https://www.mythictrap.com/ru",target:"_blank",rel:"noreferrer"},"MYTHIC TRAP")),e.createElement("li",null,e.createElement("a",{href:"https://lorrgs.io/",target:"_blank",rel:"noreferrer"},"Lorrgs")),e.createElement("br",null),e.createElement("li",null,e.createElement("a",{href:"https://wago.io/n7l5uN3YM",target:"_blank",rel:"noreferrer"},"Kaze MRT/ERT Timers Notifications"))))))))}function Ca(){var t=e.createElement("p",null,"Приветствуем вас в обновленной гильдии ⭐ Ключик в дурку ⭐ - устремленной к профессионализму и полному погружению в мир World of Warcraft. Мы эволюционировали из казуальной группы в семью настоящих семи-хардкорных игроков.");return e.createElement(be,{basename:"/kvd"},e.createElement(he,null,e.createElement(de,{path:"/",element:e.createElement(qr,null,e.createElement(na,{title:"ГИЛЬДИЯ КЛЮЧИК В ДУРКУ",p:t}),e.createElement("main",{role:"main"},e.createElement(ga,null),e.createElement(va,null)),e.createElement(ra,null))}),e.createElement(de,{path:"/guides",element:e.createElement(qr,null,e.createElement(na,{title:"ГАЙДЫ",p:"Полезная информация о вашем КЛАССЕ / СПЕКЕ. Бис шмот, трини. Ссылки на полезные ресурсы на рейдовый и групповой контент."}),e.createElement("main",{role:"main"},e.createElement(wa,null)),e.createElement(ra,null))})))}(0,n.s)(document.getElementById("root")).render(e.createElement(s,null,e.createElement(Ca,null)))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,